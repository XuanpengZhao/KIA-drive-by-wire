
KIA_Steering_Torque_Sensor_Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005534  08005534  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800553c  0800553c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  080055ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080055ac  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb4f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206d  00000000  00000000  0002cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082c  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c2a  00000000  00000000  0002ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7d2  00000000  00000000  00053ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad58  00000000  00000000  00061378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003420  00000000  00000000  0013c0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800534c 	.word	0x0800534c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800534c 	.word	0x0800534c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 ff27 	bl	8001454 <HAL_Init>

  /* USER CODE BEGIN Init */
  dacValue1 = 1551; // Important initial value
 8000606:	4bab      	ldr	r3, [pc, #684]	; (80008b4 <main+0x2b8>)
 8000608:	f240 620f 	movw	r2, #1551	; 0x60f
 800060c:	601a      	str	r2, [r3, #0]
  dacValue2 = 1534; // Important initial value
 800060e:	4baa      	ldr	r3, [pc, #680]	; (80008b8 <main+0x2bc>)
 8000610:	f240 52fe 	movw	r2, #1534	; 0x5fe
 8000614:	601a      	str	r2, [r3, #0]

  adc1Value = 0;
 8000616:	4ba9      	ldr	r3, [pc, #676]	; (80008bc <main+0x2c0>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
  adc2Value = 0;
 800061c:	4ba8      	ldr	r3, [pc, #672]	; (80008c0 <main+0x2c4>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
  timestamp = 0;
 8000622:	4ba8      	ldr	r3, [pc, #672]	; (80008c4 <main+0x2c8>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
  can_rx_flag = 0;
 8000628:	4ba7      	ldr	r3, [pc, #668]	; (80008c8 <main+0x2cc>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
  emergency_stop_flag = 0;
 800062e:	4ba7      	ldr	r3, [pc, #668]	; (80008cc <main+0x2d0>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f994 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 fb7a 	bl	8000d30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 fb4e 	bl	8000cdc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000640:	f000 f9fc 	bl	8000a3c <MX_ADC1_Init>
  MX_DAC_Init();
 8000644:	f000 fb16 	bl	8000c74 <MX_DAC_Init>
  MX_ADC2_Init();
 8000648:	f000 fa4a 	bl	8000ae0 <MX_ADC2_Init>
  MX_CAN1_Init();
 800064c:	f000 fa9a 	bl	8000b84 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000650:	489f      	ldr	r0, [pc, #636]	; (80008d0 <main+0x2d4>)
 8000652:	f000 ffb5 	bl	80015c0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000656:	489f      	ldr	r0, [pc, #636]	; (80008d4 <main+0x2d8>)
 8000658:	f000 ffb2 	bl	80015c0 <HAL_ADC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	489e      	ldr	r0, [pc, #632]	; (80008d8 <main+0x2dc>)
 8000660:	f002 fb61 	bl	8002d26 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000664:	2110      	movs	r1, #16
 8000666:	489c      	ldr	r0, [pc, #624]	; (80008d8 <main+0x2dc>)
 8000668:	f002 fb5d 	bl	8002d26 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue1);
 800066c:	4b91      	ldr	r3, [pc, #580]	; (80008b4 <main+0x2b8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	4898      	ldr	r0, [pc, #608]	; (80008d8 <main+0x2dc>)
 8000676:	f002 fbad 	bl	8002dd4 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValue2);
 800067a:	4b8f      	ldr	r3, [pc, #572]	; (80008b8 <main+0x2bc>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	2110      	movs	r1, #16
 8000682:	4895      	ldr	r0, [pc, #596]	; (80008d8 <main+0x2dc>)
 8000684:	f002 fba6 	bl	8002dd4 <HAL_DAC_SetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  timestamp = HAL_GetTick(); // Get current time in milliseconds
 8000688:	f000 ff4a 	bl	8001520 <HAL_GetTick>
 800068c:	4603      	mov	r3, r0
 800068e:	4a8d      	ldr	r2, [pc, #564]	; (80008c4 <main+0x2c8>)
 8000690:	6013      	str	r3, [r2, #0]
	  // Get ADC value from PA0 PA1
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){ // check if conversion complete
 8000692:	2164      	movs	r1, #100	; 0x64
 8000694:	488e      	ldr	r0, [pc, #568]	; (80008d0 <main+0x2d4>)
 8000696:	f001 f865 	bl	8001764 <HAL_ADC_PollForConversion>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d105      	bne.n	80006ac <main+0xb0>
		  adc1Value = HAL_ADC_GetValue(&hadc1); // read ADC value
 80006a0:	488b      	ldr	r0, [pc, #556]	; (80008d0 <main+0x2d4>)
 80006a2:	f001 f8ea 	bl	800187a <HAL_ADC_GetValue>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a84      	ldr	r2, [pc, #528]	; (80008bc <main+0x2c0>)
 80006aa:	6013      	str	r3, [r2, #0]
	  }
	  if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK){ // check if conversion complete
 80006ac:	2164      	movs	r1, #100	; 0x64
 80006ae:	4889      	ldr	r0, [pc, #548]	; (80008d4 <main+0x2d8>)
 80006b0:	f001 f858 	bl	8001764 <HAL_ADC_PollForConversion>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d105      	bne.n	80006c6 <main+0xca>
		  adc2Value = HAL_ADC_GetValue(&hadc2); // read ADC value
 80006ba:	4886      	ldr	r0, [pc, #536]	; (80008d4 <main+0x2d8>)
 80006bc:	f001 f8dd 	bl	800187a <HAL_ADC_GetValue>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a7f      	ldr	r2, [pc, #508]	; (80008c0 <main+0x2c4>)
 80006c4:	6013      	str	r3, [r2, #0]
	  }
	  // Construct CAN Message
	  uint8_t data[8];
	  data[0] = (adc1Value >> 24) & 0xFF;  // MSB of adc1Value
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <main+0x2c0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	0e1b      	lsrs	r3, r3, #24
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	743b      	strb	r3, [r7, #16]
	  data[1] = (adc1Value >> 16) & 0xFF;
 80006d0:	4b7a      	ldr	r3, [pc, #488]	; (80008bc <main+0x2c0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	0c1b      	lsrs	r3, r3, #16
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	747b      	strb	r3, [r7, #17]
	  data[2] = (adc1Value >> 8) & 0xFF;
 80006da:	4b78      	ldr	r3, [pc, #480]	; (80008bc <main+0x2c0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	74bb      	strb	r3, [r7, #18]
	  data[3] = adc1Value & 0xFF;          // LSB of adc1Value
 80006e4:	4b75      	ldr	r3, [pc, #468]	; (80008bc <main+0x2c0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	74fb      	strb	r3, [r7, #19]
	  data[4] = (adc2Value >> 24) & 0xFF;  // MSB of adc2Value
 80006ec:	4b74      	ldr	r3, [pc, #464]	; (80008c0 <main+0x2c4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0e1b      	lsrs	r3, r3, #24
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	753b      	strb	r3, [r7, #20]
	  data[5] = (adc2Value >> 16) & 0xFF;
 80006f6:	4b72      	ldr	r3, [pc, #456]	; (80008c0 <main+0x2c4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	757b      	strb	r3, [r7, #21]
	  data[6] = (adc2Value >> 8) & 0xFF;
 8000700:	4b6f      	ldr	r3, [pc, #444]	; (80008c0 <main+0x2c4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b2db      	uxtb	r3, r3
 8000708:	75bb      	strb	r3, [r7, #22]
	  data[7] = adc2Value & 0xFF;          // LSB of adc2Value
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <main+0x2c4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	75fb      	strb	r3, [r7, #23]
	  // Send a CAN message
	  CAN_Send(STM32_STEERING_ANGLE, data, sizeof(data));
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2208      	movs	r2, #8
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071e:	f000 fbdb 	bl	8000ed8 <CAN_Send>
	  if (!emergency_stop_flag){
 8000722:	4b6a      	ldr	r3, [pc, #424]	; (80008cc <main+0x2d0>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10e      	bne.n	800074a <main+0x14e>
		  uint8_t data[] = {'R', 'U', 'N', 'N', 'I', 'N', 'G', '\0'};
 800072c:	4a6b      	ldr	r2, [pc, #428]	; (80008dc <main+0x2e0>)
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000736:	e883 0003 	stmia.w	r3, {r0, r1}
		  CAN_Send(STM32_STEERING_STATES, data, sizeof(data));
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2208      	movs	r2, #8
 8000740:	4619      	mov	r1, r3
 8000742:	f240 70df 	movw	r0, #2015	; 0x7df
 8000746:	f000 fbc7 	bl	8000ed8 <CAN_Send>
	  }
	  // Receive a CAN message
	  if (can_rx_flag){
 800074a:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <main+0x2cc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d099      	beq.n	8000688 <main+0x8c>
		  if (RxHeader.StdId == STM32_STEERING_TORQUE && !emergency_stop_flag){
 8000754:	4b62      	ldr	r3, [pc, #392]	; (80008e0 <main+0x2e4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800075c:	4293      	cmp	r3, r2
 800075e:	d14f      	bne.n	8000800 <main+0x204>
 8000760:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <main+0x2d0>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d14a      	bne.n	8000800 <main+0x204>
			  dacValue1 = (RxData[0] << 24) | (RxData[1] << 16) | (RxData[2] << 8) | RxData[3];
 800076a:	4b5e      	ldr	r3, [pc, #376]	; (80008e4 <main+0x2e8>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	061a      	lsls	r2, r3, #24
 8000770:	4b5c      	ldr	r3, [pc, #368]	; (80008e4 <main+0x2e8>)
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	431a      	orrs	r2, r3
 8000778:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <main+0x2e8>)
 800077a:	789b      	ldrb	r3, [r3, #2]
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	4313      	orrs	r3, r2
 8000780:	4a58      	ldr	r2, [pc, #352]	; (80008e4 <main+0x2e8>)
 8000782:	78d2      	ldrb	r2, [r2, #3]
 8000784:	4313      	orrs	r3, r2
 8000786:	461a      	mov	r2, r3
 8000788:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <main+0x2b8>)
 800078a:	601a      	str	r2, [r3, #0]
			  dacValue2 = (RxData[4] << 24) | (RxData[5] << 16) | (RxData[6] << 8) | RxData[7];
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <main+0x2e8>)
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	061a      	lsls	r2, r3, #24
 8000792:	4b54      	ldr	r3, [pc, #336]	; (80008e4 <main+0x2e8>)
 8000794:	795b      	ldrb	r3, [r3, #5]
 8000796:	041b      	lsls	r3, r3, #16
 8000798:	431a      	orrs	r2, r3
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <main+0x2e8>)
 800079c:	799b      	ldrb	r3, [r3, #6]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	4313      	orrs	r3, r2
 80007a2:	4a50      	ldr	r2, [pc, #320]	; (80008e4 <main+0x2e8>)
 80007a4:	79d2      	ldrb	r2, [r2, #7]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <main+0x2bc>)
 80007ac:	601a      	str	r2, [r3, #0]
			  printf("Received data: %lu, %lu\n", dacValue1, dacValue2);
 80007ae:	4b41      	ldr	r3, [pc, #260]	; (80008b4 <main+0x2b8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a41      	ldr	r2, [pc, #260]	; (80008b8 <main+0x2bc>)
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	484b      	ldr	r0, [pc, #300]	; (80008e8 <main+0x2ec>)
 80007ba:	f003 feab 	bl	8004514 <iprintf>
			  if (dacValue1 > 4095) dacValue1 = 4095;
 80007be:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <main+0x2b8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007c6:	d303      	bcc.n	80007d0 <main+0x1d4>
 80007c8:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x2b8>)
 80007ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80007ce:	601a      	str	r2, [r3, #0]
			  if (dacValue2 > 4095) dacValue2 = 4095;
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <main+0x2bc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007d8:	d303      	bcc.n	80007e2 <main+0x1e6>
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <main+0x2bc>)
 80007dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80007e0:	601a      	str	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue1);
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <main+0x2b8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	483b      	ldr	r0, [pc, #236]	; (80008d8 <main+0x2dc>)
 80007ec:	f002 faf2 	bl	8002dd4 <HAL_DAC_SetValue>
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValue2);
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <main+0x2bc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	4837      	ldr	r0, [pc, #220]	; (80008d8 <main+0x2dc>)
 80007fa:	f002 faeb 	bl	8002dd4 <HAL_DAC_SetValue>
 80007fe:	e0a1      	b.n	8000944 <main+0x348>
		  }
		  else if (RxHeader.StdId == STM32_STEERING_ESTOP){
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <main+0x2e4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f240 72de 	movw	r2, #2014	; 0x7de
 8000808:	4293      	cmp	r3, r2
 800080a:	d17f      	bne.n	800090c <main+0x310>
			  if (memcmp(RxData, "STOP", 4) == 0){
 800080c:	2204      	movs	r2, #4
 800080e:	4937      	ldr	r1, [pc, #220]	; (80008ec <main+0x2f0>)
 8000810:	4834      	ldr	r0, [pc, #208]	; (80008e4 <main+0x2e8>)
 8000812:	f003 ffcd 	bl	80047b0 <memcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d119      	bne.n	8000850 <main+0x254>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	4833      	ldr	r0, [pc, #204]	; (80008f0 <main+0x2f4>)
 8000822:	f002 fcef 	bl	8003204 <HAL_GPIO_WritePin>
				  uint8_t data[] = {'E', 'S', 'T', 'O', 'P', '\0'};
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <main+0x2f8>)
 8000828:	463b      	mov	r3, r7
 800082a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082e:	6018      	str	r0, [r3, #0]
 8000830:	3304      	adds	r3, #4
 8000832:	8019      	strh	r1, [r3, #0]
				  CAN_Send(STM32_STEERING_STATES, data, sizeof(data));
 8000834:	463b      	mov	r3, r7
 8000836:	2206      	movs	r2, #6
 8000838:	4619      	mov	r1, r3
 800083a:	f240 70df 	movw	r0, #2015	; 0x7df
 800083e:	f000 fb4b 	bl	8000ed8 <CAN_Send>
				  emergency_stop_flag = 1;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <main+0x2d0>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
				  printf("Emergency Stop\n");
 8000848:	482b      	ldr	r0, [pc, #172]	; (80008f8 <main+0x2fc>)
 800084a:	f003 fed1 	bl	80045f0 <puts>
 800084e:	e079      	b.n	8000944 <main+0x348>
			  }
			  else if (memcmp(RxData, "RESET", 5) == 0){
 8000850:	2205      	movs	r2, #5
 8000852:	492a      	ldr	r1, [pc, #168]	; (80008fc <main+0x300>)
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <main+0x2e8>)
 8000856:	f003 ffab 	bl	80047b0 <memcmp>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10b      	bne.n	8000878 <main+0x27c>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2140      	movs	r1, #64	; 0x40
 8000864:	4822      	ldr	r0, [pc, #136]	; (80008f0 <main+0x2f4>)
 8000866:	f002 fccd 	bl	8003204 <HAL_GPIO_WritePin>
				  emergency_stop_flag = 0;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <main+0x2d0>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
				  printf("Reset emergency stop\n");
 8000870:	4823      	ldr	r0, [pc, #140]	; (8000900 <main+0x304>)
 8000872:	f003 febd 	bl	80045f0 <puts>
 8000876:	e065      	b.n	8000944 <main+0x348>
			  }
			  else{
				  printf("Received CAN message: ID = 0x%lX, Data = ", RxHeader.StdId);
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <main+0x2e4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	4821      	ldr	r0, [pc, #132]	; (8000904 <main+0x308>)
 8000880:	f003 fe48 	bl	8004514 <iprintf>
				  for (int i = 0; i < RxHeader.DLC; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	e00a      	b.n	80008a0 <main+0x2a4>
				  {
					  printf("%02X ", RxData[i]);
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <main+0x2e8>)
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0x30c>)
 8000896:	f003 fe3d 	bl	8004514 <iprintf>
				  for (int i = 0; i < RxHeader.DLC; i++)
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3301      	adds	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <main+0x2e4>)
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d8ef      	bhi.n	800088a <main+0x28e>
				  }
				  printf("\n");
 80008aa:	200a      	movs	r0, #10
 80008ac:	f003 fe44 	bl	8004538 <putchar>
 80008b0:	e048      	b.n	8000944 <main+0x348>
 80008b2:	bf00      	nop
 80008b4:	200001a0 	.word	0x200001a0
 80008b8:	200001a4 	.word	0x200001a4
 80008bc:	20000198 	.word	0x20000198
 80008c0:	2000019c 	.word	0x2000019c
 80008c4:	200001a8 	.word	0x200001a8
 80008c8:	200001ac 	.word	0x200001ac
 80008cc:	200001ad 	.word	0x200001ad
 80008d0:	20000084 	.word	0x20000084
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	2000013c 	.word	0x2000013c
 80008dc:	080053ec 	.word	0x080053ec
 80008e0:	200001b0 	.word	0x200001b0
 80008e4:	200001cc 	.word	0x200001cc
 80008e8:	08005364 	.word	0x08005364
 80008ec:	08005380 	.word	0x08005380
 80008f0:	40020000 	.word	0x40020000
 80008f4:	080053f4 	.word	0x080053f4
 80008f8:	08005388 	.word	0x08005388
 80008fc:	08005398 	.word	0x08005398
 8000900:	080053a0 	.word	0x080053a0
 8000904:	080053b8 	.word	0x080053b8
 8000908:	080053e4 	.word	0x080053e4
			  }

		  }
		  else{
			  printf("Received CAN message: ID = 0x%lX, Data = ", RxHeader.StdId);
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <main+0x350>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <main+0x354>)
 8000914:	f003 fdfe 	bl	8004514 <iprintf>
			  for (int i = 0; i < RxHeader.DLC; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	e00a      	b.n	8000934 <main+0x338>
			  {
				  printf("%02X ", RxData[i]);
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <main+0x358>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <main+0x35c>)
 800092a:	f003 fdf3 	bl	8004514 <iprintf>
			  for (int i = 0; i < RxHeader.DLC; i++)
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <main+0x350>)
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	429a      	cmp	r2, r3
 800093c:	d8ef      	bhi.n	800091e <main+0x322>
			  }
			  printf("\n");
 800093e:	200a      	movs	r0, #10
 8000940:	f003 fdfa 	bl	8004538 <putchar>
		  }
		  can_rx_flag = 0;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <main+0x360>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
  {
 800094a:	e69d      	b.n	8000688 <main+0x8c>
 800094c:	200001b0 	.word	0x200001b0
 8000950:	080053b8 	.word	0x080053b8
 8000954:	200001cc 	.word	0x200001cc
 8000958:	080053e4 	.word	0x080053e4
 800095c:	200001ac 	.word	0x200001ac

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2234      	movs	r2, #52	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 ff2e 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <SystemClock_Config+0xd4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <SystemClock_Config+0xd4>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <SystemClock_Config+0xd4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <SystemClock_Config+0xd8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <SystemClock_Config+0xd8>)
 80009ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <SystemClock_Config+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2310      	movs	r3, #16
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009d4:	2310      	movs	r3, #16
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009de:	2304      	movs	r3, #4
 80009e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 ff6c 	bl	80038cc <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009fa:	f000 fab5 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fc0c 	bl	8003238 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a26:	f000 fa9f 	bl	8000f68 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	; 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <MX_ADC1_Init+0x9c>)
 8000a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_ADC1_Init+0xa0>)
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000a9e:	f000 fd4b 	bl	8001538 <HAL_ADC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 fa5e 	bl	8000f68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC1_Init+0x98>)
 8000abe:	f000 fee9 	bl	8001894 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ac8:	f000 fa4e 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000084 	.word	0x20000084
 8000ad8:	40012000 	.word	0x40012000
 8000adc:	0f000001 	.word	0x0f000001

08000ae0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <MX_ADC2_Init+0x9c>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000afe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <MX_ADC2_Init+0xa0>)
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b42:	f000 fcf9 	bl	8001538 <HAL_ADC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 fa0c 	bl	8000f68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_ADC2_Init+0x98>)
 8000b62:	f000 fe97 	bl	8001894 <HAL_ADC_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000b6c:	f000 f9fc 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000cc 	.word	0x200000cc
 8000b7c:	40012100 	.word	0x40012100
 8000b80:	0f000001 	.word	0x0f000001

08000b84 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b8a:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000b8c:	4a35      	ldr	r2, [pc, #212]	; (8000c64 <MX_CAN1_Init+0xe0>)
 8000b8e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000ba4:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000ba8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000bd6:	f001 f88b 	bl	8001cf0 <HAL_CAN_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f000 f9c2 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  // Configure CAN filter

	sFilterConfig.FilterBank = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x7D0 << 5;  // Base ID
 8000bf0:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8000bf4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x7F0 << 5;  // Mask to match 0x7D0 - 0x7DF
 8000bfa:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000bfe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]


	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000c12:	f001 f969 	bl	8001ee8 <HAL_CAN_ConfigFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <MX_CAN1_Init+0xa2>
	{
		printf("CAN filter configuration failed\n");
 8000c1c:	4812      	ldr	r0, [pc, #72]	; (8000c68 <MX_CAN1_Init+0xe4>)
 8000c1e:	f003 fce7 	bl	80045f0 <puts>
		Error_Handler();
 8000c22:	f000 f9a1 	bl	8000f68 <Error_Handler>
	}

	// Start CAN
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000c28:	f001 fa3e 	bl	80020a8 <HAL_CAN_Start>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <MX_CAN1_Init+0xb8>
	{
		printf("CAN start failed\n");
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <MX_CAN1_Init+0xe8>)
 8000c34:	f003 fcdc 	bl	80045f0 <puts>
		Error_Handler();
 8000c38:	f000 f996 	bl	8000f68 <Error_Handler>
	}

	// Activate CAN RX notification
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR) != HAL_OK)
 8000c3c:	f248 0102 	movw	r1, #32770	; 0x8002
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_CAN1_Init+0xdc>)
 8000c42:	f001 fce5 	bl	8002610 <HAL_CAN_ActivateNotification>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <MX_CAN1_Init+0xd2>
	{
		printf("CAN notification activation failed\n");
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_CAN1_Init+0xec>)
 8000c4e:	f003 fccf 	bl	80045f0 <puts>
		Error_Handler();
 8000c52:	f000 f989 	bl	8000f68 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000114 	.word	0x20000114
 8000c64:	40006400 	.word	0x40006400
 8000c68:	080053fc 	.word	0x080053fc
 8000c6c:	0800541c 	.word	0x0800541c
 8000c70:	08005430 	.word	0x08005430

08000c74 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_DAC_Init+0x60>)
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <MX_DAC_Init+0x64>)
 8000c86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MX_DAC_Init+0x60>)
 8000c8a:	f002 f82a 	bl	8002ce2 <HAL_DAC_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c94:	f000 f968 	bl	8000f68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <MX_DAC_Init+0x60>)
 8000ca8:	f002 f8be 	bl	8002e28 <HAL_DAC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cb2:	f000 f959 	bl	8000f68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2210      	movs	r2, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_DAC_Init+0x60>)
 8000cbe:	f002 f8b3 	bl	8002e28 <HAL_DAC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f94e 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000013c 	.word	0x2000013c
 8000cd8:	40007400 	.word	0x40007400

08000cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_USART2_UART_Init+0x50>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f003 f878 	bl	8003e08 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d1e:	f000 f923 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000150 	.word	0x20000150
 8000d2c:	40004400 	.word	0x40004400

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_GPIO_Init+0xd0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	4812      	ldr	r0, [pc, #72]	; (8000e04 <MX_GPIO_Init+0xd4>)
 8000dbc:	f002 fa22 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0xd8>)
 8000dd8:	f002 f880 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_GPIO_Init+0xd4>)
 8000df4:	f002 f872 	bl	8002edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020800 	.word	0x40020800

08000e0c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e009      	b.n	8000e32 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fbc0 	bl	80005ac <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf1      	blt.n	8000e1e <_write+0x12>
	}
	return len;
 8000e3a:	687b      	ldr	r3, [r7, #4]
//  // Using UART transmit data
//  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
//  return len;
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    uint32_t errorcode = HAL_CAN_GetError(hcan);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f001 fe2a 	bl	8002aa6 <HAL_CAN_GetError>
 8000e52:	60f8      	str	r0, [r7, #12]
    printf("CAN Error: 0x%lX\n", errorcode);
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <HAL_CAN_ErrorCallback+0x7c>)
 8000e58:	f003 fb5c 	bl	8004514 <iprintf>

    if (errorcode & HAL_CAN_ERROR_TX_ALST0)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_CAN_ErrorCallback+0x28>
    {
        printf("Transmit Arbitration Lost Error\n");
 8000e66:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <HAL_CAN_ErrorCallback+0x80>)
 8000e68:	f003 fbc2 	bl	80045f0 <puts>
    }
    if (errorcode & HAL_CAN_ERROR_TX_TERR0)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_CAN_ErrorCallback+0x38>
    {
        printf("Transmit Error\n");
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <HAL_CAN_ErrorCallback+0x84>)
 8000e78:	f003 fbba 	bl	80045f0 <puts>
    }
    if (errorcode & HAL_CAN_ERROR_RX_FOV0)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <HAL_CAN_ErrorCallback+0x48>
    {
        printf("Receive FIFO 0 Overrun Error\n");
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <HAL_CAN_ErrorCallback+0x88>)
 8000e88:	f003 fbb2 	bl	80045f0 <puts>
    }
    if (errorcode & HAL_CAN_ERROR_RX_FOV1)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_CAN_ErrorCallback+0x58>
    {
        printf("Receive FIFO 1 Overrun Error\n");
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <HAL_CAN_ErrorCallback+0x8c>)
 8000e98:	f003 fbaa 	bl	80045f0 <puts>
    }
    if (errorcode & HAL_CAN_ERROR_BOF)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <HAL_CAN_ErrorCallback+0x74>
    {
        printf("Bus-Off Error\n");
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <HAL_CAN_ErrorCallback+0x90>)
 8000ea8:	f003 fba2 	bl	80045f0 <puts>
        HAL_CAN_Stop(hcan);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f001 f93f 	bl	8002130 <HAL_CAN_Stop>
        HAL_CAN_Start(hcan);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 f8f8 	bl	80020a8 <HAL_CAN_Start>
    }
    // Add additional error handling as needed
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08005454 	.word	0x08005454
 8000ec4:	08005468 	.word	0x08005468
 8000ec8:	08005488 	.word	0x08005488
 8000ecc:	08005498 	.word	0x08005498
 8000ed0:	080054b8 	.word	0x080054b8
 8000ed4:	080054d8 	.word	0x080054d8

08000ed8 <CAN_Send>:

void CAN_Send(uint32_t id, uint8_t *data, uint8_t length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;

    TxHeader.StdId = id;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.IDE = CAN_ID_STD;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = length;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    TxHeader.TransmitGlobalTime = DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	f107 0118 	add.w	r1, r7, #24
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <CAN_Send+0x58>)
 8000f08:	f001 f95b 	bl	80021c2 <HAL_CAN_AddTxMessage>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <CAN_Send+0x3e>
    {
        Error_Handler();
 8000f12:	f000 f829 	bl	8000f68 <Error_Handler>
    }

    // Wait for the message to be transmitted
    while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8000f16:	bf00      	nop
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <CAN_Send+0x58>)
 8000f1a:	f001 fa22 	bl	8002362 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d1f9      	bne.n	8000f18 <CAN_Send+0x40>
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3730      	adds	r7, #48	; 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000114 	.word	0x20000114

08000f34 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f001 fa42 	bl	80023cc <HAL_CAN_GetRxMessage>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
    {
        can_rx_flag = 1;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
    }
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001cc 	.word	0x200001cc
 8000f60:	200001b0 	.word	0x200001b0
 8000f64:	200001ac 	.word	0x200001ac

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb2:	2007      	movs	r0, #7
 8000fb4:	f001 fe54 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <HAL_ADC_MspInit+0xd8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d128      	bne.n	8001038 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8000ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	481c      	ldr	r0, [pc, #112]	; (80010a4 <HAL_ADC_MspInit+0xe0>)
 8001032:	f001 ff53 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001036:	e02c      	b.n	8001092 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_ADC_MspInit+0xe4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d127      	bne.n	8001092 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 800104c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_ADC_MspInit+0xdc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800107a:	2302      	movs	r3, #2
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_ADC_MspInit+0xe0>)
 800108e:	f001 ff25 	bl	8002edc <HAL_GPIO_Init>
}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	; 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40012100 	.word	0x40012100

080010ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_CAN_MspInit+0x94>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d134      	bne.n	8001138 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_CAN_MspInit+0x98>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <HAL_CAN_MspInit+0x98>)
 80010d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_CAN_MspInit+0x98>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_CAN_MspInit+0x98>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_CAN_MspInit+0x98>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_CAN_MspInit+0x98>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001106:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001118:	2309      	movs	r3, #9
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <HAL_CAN_MspInit+0x9c>)
 8001124:	f001 feda 	bl	8002edc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2014      	movs	r0, #20
 800112e:	f001 fda2 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001132:	2014      	movs	r0, #20
 8001134:	f001 fdbb 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40006400 	.word	0x40006400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_DAC_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d127      	bne.n	80011be <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_DAC_MspInit+0x80>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_DAC_MspInit+0x80>)
 8001178:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_DAC_MspInit+0x80>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_DAC_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_DAC_MspInit+0x80>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_DAC_MspInit+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011a6:	2330      	movs	r3, #48	; 0x30
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_DAC_MspInit+0x84>)
 80011ba:	f001 fe8f 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40007400 	.word	0x40007400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_UART_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_UART_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_UART_MspInit+0x88>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_UART_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_UART_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800122e:	230c      	movs	r3, #12
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123e:	2307      	movs	r3, #7
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_UART_MspInit+0x8c>)
 800124a:	f001 fe47 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004400 	.word	0x40004400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f000 f922 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <CAN1_RX0_IRQHandler+0x10>)
 80012be:	f001 f9cd 	bl	800265c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000114 	.word	0x20000114

080012cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012de:	f3af 8000 	nop.w
 80012e2:	4601      	mov	r1, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	b2ca      	uxtb	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf0      	blt.n	80012de <_read+0x12>
  }

  return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	605a      	str	r2, [r3, #4]
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_isatty>:

int _isatty(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f003 fa64 	bl	800486c <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20020000 	.word	0x20020000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	200001d4 	.word	0x200001d4
 80013d8:	20000328 	.word	0x20000328

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800142e:	f003 fa23 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff f8e3 	bl	80005fc <main>
  bx  lr    
 8001436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001444:	08005544 	.word	0x08005544
  ldr r2, =_sbss
 8001448:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800144c:	20000328 	.word	0x20000328

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_Init+0x40>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_Init+0x40>)
 800146a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x40>)
 8001476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f001 fbef 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fd74 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023c00 	.word	0x40023c00

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fc07 	bl	8002cca <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f001 fbcf 	bl	8002c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008
 800151c:	200001d8 	.word	0x200001d8

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200001d8 	.word	0x200001d8

08001538 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e033      	b.n	80015b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fd34 	bl	8000fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157e:	f023 0302 	bic.w	r3, r3, #2
 8001582:	f043 0202 	orr.w	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fab4 	bl	8001af8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f023 0303 	bic.w	r3, r3, #3
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
 80015a6:	e001      	b.n	80015ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Start+0x1a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e0b2      	b.n	8001740 <HAL_ADC_Start+0x180>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d018      	beq.n	8001622 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <HAL_ADC_Start+0x18c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_ADC_Start+0x190>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9a      	lsrs	r2, r3, #18
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d17a      	bne.n	8001726 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166e:	d106      	bne.n	800167e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f023 0206 	bic.w	r2, r3, #6
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
 800167c:	e002      	b.n	8001684 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168c:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_ADC_Start+0x194>)
 800168e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001698:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12a      	bne.n	80016fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <HAL_ADC_Start+0x198>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d015      	beq.n	80016dc <HAL_ADC_Start+0x11c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_ADC_Start+0x19c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_Start+0x106>
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_ADC_Start+0x194>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <HAL_ADC_Start+0x1a0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d136      	bne.n	800173e <HAL_ADC_Start+0x17e>
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_ADC_Start+0x194>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d130      	bne.n	800173e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d129      	bne.n	800173e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e020      	b.n	800173e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_ADC_Start+0x198>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11b      	bne.n	800173e <HAL_ADC_Start+0x17e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d114      	bne.n	800173e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e00b      	b.n	800173e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83
 8001754:	40012300 	.word	0x40012300
 8001758:	40012000 	.word	0x40012000
 800175c:	40012100 	.word	0x40012100
 8001760:	40012200 	.word	0x40012200

08001764 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001780:	d113      	bne.n	80017aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800178c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001790:	d10b      	bne.n	80017aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f043 0220 	orr.w	r2, r3, #32
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e063      	b.n	8001872 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017aa:	f7ff feb9 	bl	8001520 <HAL_GetTick>
 80017ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b0:	e021      	b.n	80017f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d01d      	beq.n	80017f6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x6c>
 80017c0:	f7ff feae 	bl	8001520 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d212      	bcs.n	80017f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d00b      	beq.n	80017f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0204 	orr.w	r2, r3, #4
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e03d      	b.n	8001872 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d1d6      	bne.n	80017b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0212 	mvn.w	r2, #18
 800180c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d123      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11f      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1c>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e113      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x244>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	d925      	bls.n	800190c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68d9      	ldr	r1, [r3, #12]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4403      	add	r3, r0
 80018fe:	3b1e      	subs	r3, #30
 8001900:	409a      	lsls	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	e022      	b.n	8001952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	2207      	movs	r2, #7
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	4603      	mov	r3, r0
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4403      	add	r3, r0
 8001948:	409a      	lsls	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d824      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b05      	subs	r3, #5
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b05      	subs	r3, #5
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
 80019a2:	e04c      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d824      	bhi.n	80019f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b23      	subs	r3, #35	; 0x23
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
 80019f4:	e023      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b41      	subs	r3, #65	; 0x41
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b41      	subs	r3, #65	; 0x41
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_ADC_ConfigChannel+0x250>)
 8001a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <HAL_ADC_ConfigChannel+0x254>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d10f      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1d8>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d10b      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_ADC_ConfigChannel+0x254>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12b      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x23a>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_ADC_ConfigChannel+0x258>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x1f4>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d122      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_ADC_ConfigChannel+0x258>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_ADC_ConfigChannel+0x25c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_ADC_ConfigChannel+0x260>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0c9a      	lsrs	r2, r3, #18
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40012300 	.word	0x40012300
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	10000012 	.word	0x10000012
 8001af0:	20000000 	.word	0x20000000
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b00:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <ADC_Init+0x1f0>)
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <ADC_Init+0x1f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e00f      	b.n	8001bf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0202 	bic.w	r2, r2, #2
 8001c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e1b      	ldrb	r3, [r3, #24]
 8001c10:	005a      	lsls	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	035a      	lsls	r2, r3, #13
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	e007      	b.n	8001c6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051a      	lsls	r2, r3, #20
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	029a      	lsls	r2, r3, #10
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	0f000001 	.word	0x0f000001

08001cf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0ed      	b.n	8001ede <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff f9cc 	bl	80010ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d24:	f7ff fbfc 	bl	8001520 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2a:	e012      	b.n	8001d52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d2c:	f7ff fbf8 	bl	8001520 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b0a      	cmp	r3, #10
 8001d38:	d90b      	bls.n	8001d52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2205      	movs	r2, #5
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0c5      	b.n	8001ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0e5      	beq.n	8001d2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0202 	bic.w	r2, r2, #2
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d70:	f7ff fbd6 	bl	8001520 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d76:	e012      	b.n	8001d9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d78:	f7ff fbd2 	bl	8001520 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d90b      	bls.n	8001d9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e09f      	b.n	8001ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7e1b      	ldrb	r3, [r3, #24]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d108      	bne.n	8001dc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e007      	b.n	8001dd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7e5b      	ldrb	r3, [r3, #25]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d108      	bne.n	8001df0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e007      	b.n	8001e00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e9b      	ldrb	r3, [r3, #26]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d108      	bne.n	8001e1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e007      	b.n	8001e2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0220 	bic.w	r2, r2, #32
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7edb      	ldrb	r3, [r3, #27]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d108      	bne.n	8001e44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0210 	bic.w	r2, r2, #16
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e007      	b.n	8001e54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0210 	orr.w	r2, r2, #16
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7f1b      	ldrb	r3, [r3, #28]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0208 	orr.w	r2, r2, #8
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e007      	b.n	8001e7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0208 	bic.w	r2, r2, #8
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7f5b      	ldrb	r3, [r3, #29]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e007      	b.n	8001ea8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0204 	bic.w	r2, r2, #4
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	ea42 0103 	orr.w	r1, r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d003      	beq.n	8001f0e <HAL_CAN_ConfigFilter+0x26>
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	f040 80be 	bne.w	800208a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f10:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	401a      	ands	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d123      	bne.n	8001fb8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3248      	adds	r2, #72	; 0x48
 8001f98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fae:	6979      	ldr	r1, [r7, #20]
 8001fb0:	3348      	adds	r3, #72	; 0x48
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d122      	bne.n	8002006 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fe0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3248      	adds	r2, #72	; 0x48
 8001fe6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	3348      	adds	r3, #72	; 0x48
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	401a      	ands	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002020:	e007      	b.n	8002032 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	431a      	orrs	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800204c:	e007      	b.n	800205e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	431a      	orrs	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800207c:	f023 0201 	bic.w	r2, r3, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e006      	b.n	8002098 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40006400 	.word	0x40006400

080020a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d12e      	bne.n	800211a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020d4:	f7ff fa24 	bl	8001520 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020da:	e012      	b.n	8002102 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020dc:	f7ff fa20 	bl	8001520 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d90b      	bls.n	8002102 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e012      	b.n	8002128 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e5      	bne.n	80020dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e006      	b.n	8002128 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d133      	bne.n	80021ac <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002154:	f7ff f9e4 	bl	8001520 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800215a:	e012      	b.n	8002182 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800215c:	f7ff f9e0 	bl	8001520 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b0a      	cmp	r3, #10
 8002168:	d90b      	bls.n	8002182 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2205      	movs	r2, #5
 800217a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e01b      	b.n	80021ba <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0e5      	beq.n	800215c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0202 	bic.w	r2, r2, #2
 800219e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e006      	b.n	80021ba <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b089      	sub	sp, #36	; 0x24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d003      	beq.n	80021ee <HAL_CAN_AddTxMessage+0x2c>
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	f040 80ad 	bne.w	8002348 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8095 	beq.w	8002338 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	0e1b      	lsrs	r3, r3, #24
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002218:	2201      	movs	r2, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	409a      	lsls	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3318      	adds	r3, #24
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	440b      	add	r3, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e00f      	b.n	8002266 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002250:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800225a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3318      	adds	r3, #24
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	440b      	add	r3, r1
 8002264:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3318      	adds	r3, #24
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	440b      	add	r3, r1
 8002276:	3304      	adds	r3, #4
 8002278:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	7d1b      	ldrb	r3, [r3, #20]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d111      	bne.n	80022a6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3318      	adds	r3, #24
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3318      	adds	r3, #24
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	440b      	add	r3, r1
 80022a2:	3304      	adds	r3, #4
 80022a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3307      	adds	r3, #7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3306      	adds	r3, #6
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3305      	adds	r3, #5
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	3204      	adds	r2, #4
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	ea43 0200 	orr.w	r2, r3, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3303      	adds	r3, #3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3302      	adds	r3, #2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	4610      	mov	r0, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6811      	ldr	r1, [r2, #0]
 8002304:	ea43 0200 	orr.w	r2, r3, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	440b      	add	r3, r1
 800230e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002312:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3318      	adds	r3, #24
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3318      	adds	r3, #24
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e00e      	b.n	8002356 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e006      	b.n	8002356 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d002      	beq.n	8002382 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d11d      	bne.n	80023be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_GetRxMessage+0x24>
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 8103 	bne.w	80025f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10e      	bne.n	8002414 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d116      	bne.n	8002432 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0f7      	b.n	8002604 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0e8      	b.n	8002604 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	331b      	adds	r3, #27
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0204 	and.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	331b      	adds	r3, #27
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0d5b      	lsrs	r3, r3, #21
 8002460:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e00b      	b.n	8002482 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	331b      	adds	r3, #27
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	331b      	adds	r3, #27
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0202 	and.w	r2, r3, #2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	331b      	adds	r3, #27
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	3304      	adds	r3, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2208      	movs	r2, #8
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e00b      	b.n	80024d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	331b      	adds	r3, #27
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	331b      	adds	r3, #27
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	331b      	adds	r3, #27
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	4413      	add	r3, r2
 8002520:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0a1a      	lsrs	r2, r3, #8
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4413      	add	r3, r2
 800253a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0c1a      	lsrs	r2, r3, #16
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	3302      	adds	r3, #2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0e1a      	lsrs	r2, r3, #24
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3303      	adds	r3, #3
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	3304      	adds	r3, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0a1a      	lsrs	r2, r3, #8
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3305      	adds	r3, #5
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4413      	add	r3, r2
 80025a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0c1a      	lsrs	r2, r3, #16
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	3306      	adds	r3, #6
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e1a      	lsrs	r2, r3, #24
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3307      	adds	r3, #7
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	e007      	b.n	80025f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e006      	b.n	8002604 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d002      	beq.n	800262e <HAL_CAN_ActivateNotification+0x1e>
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d109      	bne.n	8002642 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6959      	ldr	r1, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e006      	b.n	8002650 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07c      	beq.n	800279c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f983 	bl	80029ca <HAL_CAN_TxMailbox0CompleteCallback>
 80026c4:	e016      	b.n	80026f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	e00c      	b.n	80026f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e002      	b.n	80026f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f989 	bl	8002a06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d024      	beq.n	8002748 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002706:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f963 	bl	80029de <HAL_CAN_TxMailbox1CompleteCallback>
 8002718:	e016      	b.n	8002748 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e00c      	b.n	8002748 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e002      	b.n	8002748 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f969 	bl	8002a1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d024      	beq.n	800279c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800275a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f943 	bl	80029f2 <HAL_CAN_TxMailbox2CompleteCallback>
 800276c:	e016      	b.n	800279c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	e00c      	b.n	800279c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e002      	b.n	800279c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f949 	bl	8002a2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f930 	bl	8002a42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fb9a 	bl	8000f34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f912 	bl	8002a6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8f9 	bl	8002a56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f8fc 	bl	8002a7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2208      	movs	r2, #8
 80028a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8f5 	bl	8002a92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07b      	beq.n	80029aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d072      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002916:	2b00      	cmp	r3, #0
 8002918:	d043      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03e      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292a:	2b60      	cmp	r3, #96	; 0x60
 800292c:	d02b      	beq.n	8002986 <HAL_CAN_IRQHandler+0x32a>
 800292e:	2b60      	cmp	r3, #96	; 0x60
 8002930:	d82e      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 8002932:	2b50      	cmp	r3, #80	; 0x50
 8002934:	d022      	beq.n	800297c <HAL_CAN_IRQHandler+0x320>
 8002936:	2b50      	cmp	r3, #80	; 0x50
 8002938:	d82a      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d019      	beq.n	8002972 <HAL_CAN_IRQHandler+0x316>
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d826      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 8002942:	2b30      	cmp	r3, #48	; 0x30
 8002944:	d010      	beq.n	8002968 <HAL_CAN_IRQHandler+0x30c>
 8002946:	2b30      	cmp	r3, #48	; 0x30
 8002948:	d822      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 800294a:	2b10      	cmp	r3, #16
 800294c:	d002      	beq.n	8002954 <HAL_CAN_IRQHandler+0x2f8>
 800294e:	2b20      	cmp	r3, #32
 8002950:	d005      	beq.n	800295e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002952:	e01d      	b.n	8002990 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	f043 0308 	orr.w	r3, r3, #8
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800295c:	e019      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002966:	e014      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002970:	e00f      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297a:	e00a      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002984:	e005      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298e:	e000      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            break;
 8002990:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2204      	movs	r2, #4
 80029a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe fa41 	bl	8000e44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff8e 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff29 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff3e 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff8e 	bl	8002bb4 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5d 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff31 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e014      	b.n	8002d1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	791b      	ldrb	r3, [r3, #4]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fe fa21 	bl	800114c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e046      	b.n	8002dc8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	795b      	ldrb	r3, [r3, #5]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_DAC_Start+0x20>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e040      	b.n	8002dc8 <HAL_DAC_Start+0xa2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2201      	movs	r2, #1
 8002d60:	409a      	lsls	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d7a:	2b3c      	cmp	r3, #60	; 0x3c
 8002d7c:	d11d      	bne.n	8002dba <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	e014      	b.n	8002dba <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	213c      	movs	r1, #60	; 0x3c
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d107      	bne.n	8002dba <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0202 	orr.w	r2, r2, #2
 8002db8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e015      	b.n	8002e1c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3308      	adds	r3, #8
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e004      	b.n	8002e12 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3314      	adds	r3, #20
 8002e10:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	461a      	mov	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_DAC_ConfigChannel+0x1c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e042      	b.n	8002ece <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	795b      	ldrb	r3, [r3, #5]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_DAC_ConfigChannel+0x2c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e03c      	b.n	8002ece <HAL_DAC_ConfigChannel+0xa6>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	22c0      	movs	r2, #192	; 0xc0
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e165      	b.n	80031c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8154 	bne.w	80031be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d130      	bne.n	8002f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80ae 	beq.w	80031be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_GPIO_Init+0x300>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <HAL_GPIO_Init+0x308>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d025      	beq.n	80030f6 <HAL_GPIO_Init+0x21a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <HAL_GPIO_Init+0x30c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <HAL_GPIO_Init+0x216>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_GPIO_Init+0x310>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d019      	beq.n	80030ee <HAL_GPIO_Init+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x314>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_GPIO_Init+0x318>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x20a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <HAL_GPIO_Init+0x31c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x206>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a49      	ldr	r2, [pc, #292]	; (80031fc <HAL_GPIO_Init+0x320>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x202>
 80030da:	2306      	movs	r3, #6
 80030dc:	e00c      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030de:	2307      	movs	r3, #7
 80030e0:	e00a      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030e2:	2305      	movs	r3, #5
 80030e4:	e008      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030ea:	2303      	movs	r3, #3
 80030ec:	e004      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030f6:	2300      	movs	r3, #0
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f002 0203 	and.w	r2, r2, #3
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	4093      	lsls	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003108:	4935      	ldr	r1, [pc, #212]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a31      	ldr	r2, [pc, #196]	; (8003200 <HAL_GPIO_Init+0x324>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_GPIO_Init+0x324>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <HAL_GPIO_Init+0x324>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3301      	adds	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	f67f ae96 	bls.w	8002ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40021400 	.word	0x40021400
 80031fc:	40021800 	.word	0x40021800
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0cc      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b68      	ldr	r3, [pc, #416]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d90c      	bls.n	8003274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0b8      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800328c:	4b59      	ldr	r3, [pc, #356]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a4:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	494d      	ldr	r1, [pc, #308]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d044      	beq.n	8003358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d119      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e067      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4934      	ldr	r1, [pc, #208]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003328:	f7fe f8fa 	bl	8001520 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fe f8f6 	bl	8001520 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 020c 	and.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d1eb      	bne.n	8003330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d20c      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e032      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4916      	ldr	r1, [pc, #88]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	490e      	ldr	r1, [pc, #56]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033be:	f000 f855 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490a      	ldr	r1, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f85a 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023c00 	.word	0x40023c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	080054e8 	.word	0x080054e8
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000004 	.word	0x20000004

08003404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	080054f8 	.word	0x080054f8

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffdc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	080054f8 	.word	0x080054f8

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b0ae      	sub	sp, #184	; 0xb8
 8003472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003492:	4bcb      	ldr	r3, [pc, #812]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b0c      	cmp	r3, #12
 800349c:	f200 8206 	bhi.w	80038ac <HAL_RCC_GetSysClockFreq+0x440>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	080038ad 	.word	0x080038ad
 80034b0:	080038ad 	.word	0x080038ad
 80034b4:	080038ad 	.word	0x080038ad
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080038ad 	.word	0x080038ad
 80034c0:	080038ad 	.word	0x080038ad
 80034c4:	080038ad 	.word	0x080038ad
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	080038ad 	.word	0x080038ad
 80034d0:	080038ad 	.word	0x080038ad
 80034d4:	080038ad 	.word	0x080038ad
 80034d8:	080036dd 	.word	0x080036dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4bb9      	ldr	r3, [pc, #740]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80034de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034e2:	e1e7      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e4:	4bb8      	ldr	r3, [pc, #736]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034ea:	e1e3      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ec:	4bb4      	ldr	r3, [pc, #720]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f8:	4bb1      	ldr	r3, [pc, #708]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d071      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003504:	4bae      	ldr	r3, [pc, #696]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003510:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800352a:	4622      	mov	r2, r4
 800352c:	462b      	mov	r3, r5
 800352e:	f04f 0000 	mov.w	r0, #0
 8003532:	f04f 0100 	mov.w	r1, #0
 8003536:	0159      	lsls	r1, r3, #5
 8003538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800353c:	0150      	lsls	r0, r2, #5
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4621      	mov	r1, r4
 8003544:	1a51      	subs	r1, r2, r1
 8003546:	6439      	str	r1, [r7, #64]	; 0x40
 8003548:	4629      	mov	r1, r5
 800354a:	eb63 0301 	sbc.w	r3, r3, r1
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800355c:	4649      	mov	r1, r9
 800355e:	018b      	lsls	r3, r1, #6
 8003560:	4641      	mov	r1, r8
 8003562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003566:	4641      	mov	r1, r8
 8003568:	018a      	lsls	r2, r1, #6
 800356a:	4641      	mov	r1, r8
 800356c:	1a51      	subs	r1, r2, r1
 800356e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003570:	4649      	mov	r1, r9
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003584:	4649      	mov	r1, r9
 8003586:	00cb      	lsls	r3, r1, #3
 8003588:	4641      	mov	r1, r8
 800358a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358e:	4641      	mov	r1, r8
 8003590:	00ca      	lsls	r2, r1, #3
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	4603      	mov	r3, r0
 8003598:	4622      	mov	r2, r4
 800359a:	189b      	adds	r3, r3, r2
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
 800359e:	462b      	mov	r3, r5
 80035a0:	460a      	mov	r2, r1
 80035a2:	eb42 0303 	adc.w	r3, r2, r3
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035b4:	4629      	mov	r1, r5
 80035b6:	024b      	lsls	r3, r1, #9
 80035b8:	4621      	mov	r1, r4
 80035ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035be:	4621      	mov	r1, r4
 80035c0:	024a      	lsls	r2, r1, #9
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035d8:	f7fc fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035e6:	e067      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e8:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003600:	67bb      	str	r3, [r7, #120]	; 0x78
 8003602:	2300      	movs	r3, #0
 8003604:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003606:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	f04f 0000 	mov.w	r0, #0
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	0159      	lsls	r1, r3, #5
 8003618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800361c:	0150      	lsls	r0, r2, #5
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4621      	mov	r1, r4
 8003624:	1a51      	subs	r1, r2, r1
 8003626:	62b9      	str	r1, [r7, #40]	; 0x28
 8003628:	4629      	mov	r1, r5
 800362a:	eb63 0301 	sbc.w	r3, r3, r1
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800363c:	4649      	mov	r1, r9
 800363e:	018b      	lsls	r3, r1, #6
 8003640:	4641      	mov	r1, r8
 8003642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003646:	4641      	mov	r1, r8
 8003648:	018a      	lsls	r2, r1, #6
 800364a:	4641      	mov	r1, r8
 800364c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003650:	4649      	mov	r1, r9
 8003652:	eb63 0b01 	sbc.w	fp, r3, r1
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003662:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800366a:	4692      	mov	sl, r2
 800366c:	469b      	mov	fp, r3
 800366e:	4623      	mov	r3, r4
 8003670:	eb1a 0303 	adds.w	r3, sl, r3
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	462b      	mov	r3, r5
 8003678:	eb4b 0303 	adc.w	r3, fp, r3
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800368a:	4629      	mov	r1, r5
 800368c:	028b      	lsls	r3, r1, #10
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003694:	4621      	mov	r1, r4
 8003696:	028a      	lsls	r2, r1, #10
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a0:	2200      	movs	r2, #0
 80036a2:	673b      	str	r3, [r7, #112]	; 0x70
 80036a4:	677a      	str	r2, [r7, #116]	; 0x74
 80036a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036aa:	f7fc fe01 	bl	80002b0 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4613      	mov	r3, r2
 80036b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b8:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	3301      	adds	r3, #1
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036da:	e0eb      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d06b      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f4:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	2200      	movs	r2, #0
 80036fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003706:	663b      	str	r3, [r7, #96]	; 0x60
 8003708:	2300      	movs	r3, #0
 800370a:	667b      	str	r3, [r7, #100]	; 0x64
 800370c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003710:	4622      	mov	r2, r4
 8003712:	462b      	mov	r3, r5
 8003714:	f04f 0000 	mov.w	r0, #0
 8003718:	f04f 0100 	mov.w	r1, #0
 800371c:	0159      	lsls	r1, r3, #5
 800371e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003722:	0150      	lsls	r0, r2, #5
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4621      	mov	r1, r4
 800372a:	1a51      	subs	r1, r2, r1
 800372c:	61b9      	str	r1, [r7, #24]
 800372e:	4629      	mov	r1, r5
 8003730:	eb63 0301 	sbc.w	r3, r3, r1
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003742:	4659      	mov	r1, fp
 8003744:	018b      	lsls	r3, r1, #6
 8003746:	4651      	mov	r1, sl
 8003748:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374c:	4651      	mov	r1, sl
 800374e:	018a      	lsls	r2, r1, #6
 8003750:	4651      	mov	r1, sl
 8003752:	ebb2 0801 	subs.w	r8, r2, r1
 8003756:	4659      	mov	r1, fp
 8003758:	eb63 0901 	sbc.w	r9, r3, r1
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003770:	4690      	mov	r8, r2
 8003772:	4699      	mov	r9, r3
 8003774:	4623      	mov	r3, r4
 8003776:	eb18 0303 	adds.w	r3, r8, r3
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	462b      	mov	r3, r5
 800377e:	eb49 0303 	adc.w	r3, r9, r3
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003790:	4629      	mov	r1, r5
 8003792:	024b      	lsls	r3, r1, #9
 8003794:	4621      	mov	r1, r4
 8003796:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800379a:	4621      	mov	r1, r4
 800379c:	024a      	lsls	r2, r1, #9
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037a6:	2200      	movs	r2, #0
 80037a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80037aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037b0:	f7fc fd7e 	bl	80002b0 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4613      	mov	r3, r2
 80037ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037be:	e065      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x420>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037cc:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	2200      	movs	r2, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	4611      	mov	r1, r2
 80037d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
 80037de:	2300      	movs	r3, #0
 80037e0:	657b      	str	r3, [r7, #84]	; 0x54
 80037e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037e6:	4642      	mov	r2, r8
 80037e8:	464b      	mov	r3, r9
 80037ea:	f04f 0000 	mov.w	r0, #0
 80037ee:	f04f 0100 	mov.w	r1, #0
 80037f2:	0159      	lsls	r1, r3, #5
 80037f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f8:	0150      	lsls	r0, r2, #5
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4641      	mov	r1, r8
 8003800:	1a51      	subs	r1, r2, r1
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	4649      	mov	r1, r9
 8003806:	eb63 0301 	sbc.w	r3, r3, r1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003818:	4659      	mov	r1, fp
 800381a:	018b      	lsls	r3, r1, #6
 800381c:	4651      	mov	r1, sl
 800381e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003822:	4651      	mov	r1, sl
 8003824:	018a      	lsls	r2, r1, #6
 8003826:	4651      	mov	r1, sl
 8003828:	1a54      	subs	r4, r2, r1
 800382a:	4659      	mov	r1, fp
 800382c:	eb63 0501 	sbc.w	r5, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	00eb      	lsls	r3, r5, #3
 800383a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383e:	00e2      	lsls	r2, r4, #3
 8003840:	4614      	mov	r4, r2
 8003842:	461d      	mov	r5, r3
 8003844:	4643      	mov	r3, r8
 8003846:	18e3      	adds	r3, r4, r3
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	464b      	mov	r3, r9
 800384c:	eb45 0303 	adc.w	r3, r5, r3
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800385e:	4629      	mov	r1, r5
 8003860:	028b      	lsls	r3, r1, #10
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003868:	4621      	mov	r1, r4
 800386a:	028a      	lsls	r2, r1, #10
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003874:	2200      	movs	r2, #0
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
 8003878:	64fa      	str	r2, [r7, #76]	; 0x4c
 800387a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800387e:	f7fc fd17 	bl	80002b0 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4613      	mov	r3, r2
 8003888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0f1b      	lsrs	r3, r3, #28
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800389a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800389e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038aa:	e003      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	37b8      	adds	r7, #184	; 0xb8
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400

080038cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e28d      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8083 	beq.w	80039f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038ec:	4b94      	ldr	r3, [pc, #592]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d019      	beq.n	800392c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f8:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003900:	2b08      	cmp	r3, #8
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003904:	4b8e      	ldr	r3, [pc, #568]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003910:	d00c      	beq.n	800392c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d112      	bne.n	8003944 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392a:	d10b      	bne.n	8003944 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05b      	beq.n	80039f0 <HAL_RCC_OscConfig+0x124>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d157      	bne.n	80039f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e25a      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d106      	bne.n	800395c <HAL_RCC_OscConfig+0x90>
 800394e:	4b7c      	ldr	r3, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7b      	ldr	r2, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e01d      	b.n	8003998 <HAL_RCC_OscConfig+0xcc>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0xb4>
 8003966:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a75      	ldr	r2, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b73      	ldr	r3, [pc, #460]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0xcc>
 8003980:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6b      	ldr	r2, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fdbe 	bl	8001520 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd fdba 	bl	8001520 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e21f      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0xdc>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd fdaa 	bl	8001520 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fd fda6 	bl	8001520 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e20b      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x104>
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d06f      	beq.n	8003ade <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039fe:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x186>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1d3      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCC_OscConfig+0x278>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd fd53 	bl	8001520 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fd fd4f 	bl	8001520 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e1b4      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x278>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fd32 	bl	8001520 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fd fd2e 	bl	8001520 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e193      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d036      	beq.n	8003b58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd fd12 	bl	8001520 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd fd0e 	bl	8001520 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e173      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x234>
 8003b1e:	e01b      	b.n	8003b58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fd fcfb 	bl	8001520 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e00e      	b.n	8003b4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fd fcf7 	bl	8001520 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d907      	bls.n	8003b4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e15c      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ea      	bne.n	8003b2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a7e      	ldr	r2, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fd fcb7 	bl	8001520 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd fcb3 	bl	8001520 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e118      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x31e>
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x358>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x340>
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x358>
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a56      	ldr	r2, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd fc78 	bl	8001520 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd fc74 	bl	8001520 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0d7      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x368>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd fc62 	bl	8001520 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd fc5e 	bl	8001520 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0c1      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80ad 	beq.w	8003df8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d060      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d145      	bne.n	8003d3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4b4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fc32 	bl	8001520 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fc2e 	bl	8001520 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e093      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4b4>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fc03 	bl	8001520 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd fbff 	bl	8001520 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e064      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x452>
 8003d3c:	e05c      	b.n	8003df8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x4b4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fd fbec 	bl	8001520 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd fbe8 	bl	8001520 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e04d      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x480>
 8003d6a:	e045      	b.n	8003df8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e040      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCC_OscConfig+0x538>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d030      	beq.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d129      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d122      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d119      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d10f      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800

08003e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e042      	b.n	8003ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd f9d0 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f82b 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b0c0      	sub	sp, #256	; 0x100
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	ea40 0301 	orr.w	r3, r0, r1
 8003ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f00:	f021 010c 	bic.w	r1, r1, #12
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	6999      	ldr	r1, [r3, #24]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	ea40 0301 	orr.w	r3, r0, r1
 8003f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <UART_SetConfig+0x2cc>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d005      	beq.n	8003f48 <UART_SetConfig+0xa0>
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <UART_SetConfig+0x2d0>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d104      	bne.n	8003f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7ff fa7c 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f50:	e003      	b.n	8003f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f52:	f7ff fa63 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8003f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	f040 810c 	bne.w	8004180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f82:	415b      	adcs	r3, r3
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	eb12 0801 	adds.w	r8, r2, r1
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb43 0901 	adc.w	r9, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003faa:	4690      	mov	r8, r2
 8003fac:	4699      	mov	r9, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	eb18 0303 	adds.w	r3, r8, r3
 8003fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb8:	462b      	mov	r3, r5
 8003fba:	eb49 0303 	adc.w	r3, r9, r3
 8003fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	18db      	adds	r3, r3, r3
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
 8003fdc:	4613      	mov	r3, r2
 8003fde:	eb42 0303 	adc.w	r3, r2, r3
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fec:	f7fc f960 	bl	80002b0 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <UART_SetConfig+0x2d4>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800400c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	64b9      	str	r1, [r7, #72]	; 0x48
 8004018:	415b      	adcs	r3, r3
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004020:	4641      	mov	r1, r8
 8004022:	eb12 0a01 	adds.w	sl, r2, r1
 8004026:	4649      	mov	r1, r9
 8004028:	eb43 0b01 	adc.w	fp, r3, r1
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800403c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004040:	4692      	mov	sl, r2
 8004042:	469b      	mov	fp, r3
 8004044:	4643      	mov	r3, r8
 8004046:	eb1a 0303 	adds.w	r3, sl, r3
 800404a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404e:	464b      	mov	r3, r9
 8004050:	eb4b 0303 	adc.w	r3, fp, r3
 8004054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800406c:	460b      	mov	r3, r1
 800406e:	18db      	adds	r3, r3, r3
 8004070:	643b      	str	r3, [r7, #64]	; 0x40
 8004072:	4613      	mov	r3, r2
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
 800407a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004082:	f7fc f915 	bl	80002b0 <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4611      	mov	r1, r2
 800408c:	4b3b      	ldr	r3, [pc, #236]	; (800417c <UART_SetConfig+0x2d4>)
 800408e:	fba3 2301 	umull	r2, r3, r3, r1
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2264      	movs	r2, #100	; 0x64
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040a2:	4b36      	ldr	r3, [pc, #216]	; (800417c <UART_SetConfig+0x2d4>)
 80040a4:	fba3 2302 	umull	r2, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040b0:	441c      	add	r4, r3
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80040cc:	415b      	adcs	r3, r3
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6339      	str	r1, [r7, #48]	; 0x30
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004128:	460b      	mov	r3, r1
 800412a:	18db      	adds	r3, r3, r3
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	4613      	mov	r3, r2
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800413a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800413e:	f7fc f8b7 	bl	80002b0 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <UART_SetConfig+0x2d4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UART_SetConfig+0x2d4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 0207 	and.w	r2, r3, #7
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004170:	e106      	b.n	8004380 <UART_SetConfig+0x4d8>
 8004172:	bf00      	nop
 8004174:	40011000 	.word	0x40011000
 8004178:	40011400 	.word	0x40011400
 800417c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800418a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800418e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004192:	4642      	mov	r2, r8
 8004194:	464b      	mov	r3, r9
 8004196:	1891      	adds	r1, r2, r2
 8004198:	6239      	str	r1, [r7, #32]
 800419a:	415b      	adcs	r3, r3
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a2:	4641      	mov	r1, r8
 80041a4:	1854      	adds	r4, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb43 0501 	adc.w	r5, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	00eb      	lsls	r3, r5, #3
 80041b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ba:	00e2      	lsls	r2, r4, #3
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	4643      	mov	r3, r8
 80041c2:	18e3      	adds	r3, r4, r3
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c8:	464b      	mov	r3, r9
 80041ca:	eb45 0303 	adc.w	r3, r5, r3
 80041ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ee:	4629      	mov	r1, r5
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f8:	4621      	mov	r1, r4
 80041fa:	008a      	lsls	r2, r1, #2
 80041fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004200:	f7fc f856 	bl	80002b0 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b60      	ldr	r3, [pc, #384]	; (800438c <UART_SetConfig+0x4e4>)
 800420a:	fba3 2302 	umull	r2, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	011c      	lsls	r4, r3, #4
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800421c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	1891      	adds	r1, r2, r2
 800422a:	61b9      	str	r1, [r7, #24]
 800422c:	415b      	adcs	r3, r3
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	4641      	mov	r1, r8
 8004236:	1851      	adds	r1, r2, r1
 8004238:	6139      	str	r1, [r7, #16]
 800423a:	4649      	mov	r1, r9
 800423c:	414b      	adcs	r3, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800424c:	4659      	mov	r1, fp
 800424e:	00cb      	lsls	r3, r1, #3
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004256:	4651      	mov	r1, sl
 8004258:	00ca      	lsls	r2, r1, #3
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	4603      	mov	r3, r0
 8004260:	4642      	mov	r2, r8
 8004262:	189b      	adds	r3, r3, r2
 8004264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004268:	464b      	mov	r3, r9
 800426a:	460a      	mov	r2, r1
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	67bb      	str	r3, [r7, #120]	; 0x78
 800427e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800428c:	4649      	mov	r1, r9
 800428e:	008b      	lsls	r3, r1, #2
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004296:	4641      	mov	r1, r8
 8004298:	008a      	lsls	r2, r1, #2
 800429a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800429e:	f7fc f807 	bl	80002b0 <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	4b38      	ldr	r3, [pc, #224]	; (800438c <UART_SetConfig+0x4e4>)
 80042aa:	fba3 2301 	umull	r2, r3, r3, r1
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2264      	movs	r2, #100	; 0x64
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	1acb      	subs	r3, r1, r3
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	3332      	adds	r3, #50	; 0x32
 80042bc:	4a33      	ldr	r2, [pc, #204]	; (800438c <UART_SetConfig+0x4e4>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c8:	441c      	add	r4, r3
 80042ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ce:	2200      	movs	r2, #0
 80042d0:	673b      	str	r3, [r7, #112]	; 0x70
 80042d2:	677a      	str	r2, [r7, #116]	; 0x74
 80042d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	415b      	adcs	r3, r3
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e8:	4641      	mov	r1, r8
 80042ea:	1851      	adds	r1, r2, r1
 80042ec:	6039      	str	r1, [r7, #0]
 80042ee:	4649      	mov	r1, r9
 80042f0:	414b      	adcs	r3, r1
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004300:	4659      	mov	r1, fp
 8004302:	00cb      	lsls	r3, r1, #3
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430a:	4651      	mov	r1, sl
 800430c:	00ca      	lsls	r2, r1, #3
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	4603      	mov	r3, r0
 8004314:	4642      	mov	r2, r8
 8004316:	189b      	adds	r3, r3, r2
 8004318:	66bb      	str	r3, [r7, #104]	; 0x68
 800431a:	464b      	mov	r3, r9
 800431c:	460a      	mov	r2, r1
 800431e:	eb42 0303 	adc.w	r3, r2, r3
 8004322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	663b      	str	r3, [r7, #96]	; 0x60
 800432e:	667a      	str	r2, [r7, #100]	; 0x64
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800433c:	4649      	mov	r1, r9
 800433e:	008b      	lsls	r3, r1, #2
 8004340:	4641      	mov	r1, r8
 8004342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004346:	4641      	mov	r1, r8
 8004348:	008a      	lsls	r2, r1, #2
 800434a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800434e:	f7fb ffaf 	bl	80002b0 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <UART_SetConfig+0x4e4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	; 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	3332      	adds	r3, #50	; 0x32
 800436a:	4a08      	ldr	r2, [pc, #32]	; (800438c <UART_SetConfig+0x4e4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4422      	add	r2, r4
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <std>:
 8004390:	2300      	movs	r3, #0
 8004392:	b510      	push	{r4, lr}
 8004394:	4604      	mov	r4, r0
 8004396:	e9c0 3300 	strd	r3, r3, [r0]
 800439a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800439e:	6083      	str	r3, [r0, #8]
 80043a0:	8181      	strh	r1, [r0, #12]
 80043a2:	6643      	str	r3, [r0, #100]	; 0x64
 80043a4:	81c2      	strh	r2, [r0, #14]
 80043a6:	6183      	str	r3, [r0, #24]
 80043a8:	4619      	mov	r1, r3
 80043aa:	2208      	movs	r2, #8
 80043ac:	305c      	adds	r0, #92	; 0x5c
 80043ae:	f000 fa0f 	bl	80047d0 <memset>
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <std+0x58>)
 80043b4:	6263      	str	r3, [r4, #36]	; 0x24
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <std+0x5c>)
 80043b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <std+0x60>)
 80043bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <std+0x64>)
 80043c0:	6323      	str	r3, [r4, #48]	; 0x30
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <std+0x68>)
 80043c4:	6224      	str	r4, [r4, #32]
 80043c6:	429c      	cmp	r4, r3
 80043c8:	d006      	beq.n	80043d8 <std+0x48>
 80043ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80043ce:	4294      	cmp	r4, r2
 80043d0:	d002      	beq.n	80043d8 <std+0x48>
 80043d2:	33d0      	adds	r3, #208	; 0xd0
 80043d4:	429c      	cmp	r4, r3
 80043d6:	d105      	bne.n	80043e4 <std+0x54>
 80043d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e0:	f000 ba6e 	b.w	80048c0 <__retarget_lock_init_recursive>
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	bf00      	nop
 80043e8:	08004601 	.word	0x08004601
 80043ec:	08004623 	.word	0x08004623
 80043f0:	0800465b 	.word	0x0800465b
 80043f4:	0800467f 	.word	0x0800467f
 80043f8:	200001dc 	.word	0x200001dc

080043fc <stdio_exit_handler>:
 80043fc:	4a02      	ldr	r2, [pc, #8]	; (8004408 <stdio_exit_handler+0xc>)
 80043fe:	4903      	ldr	r1, [pc, #12]	; (800440c <stdio_exit_handler+0x10>)
 8004400:	4803      	ldr	r0, [pc, #12]	; (8004410 <stdio_exit_handler+0x14>)
 8004402:	f000 b869 	b.w	80044d8 <_fwalk_sglue>
 8004406:	bf00      	nop
 8004408:	2000000c 	.word	0x2000000c
 800440c:	0800516d 	.word	0x0800516d
 8004410:	20000018 	.word	0x20000018

08004414 <cleanup_stdio>:
 8004414:	6841      	ldr	r1, [r0, #4]
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <cleanup_stdio+0x34>)
 8004418:	4299      	cmp	r1, r3
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	d001      	beq.n	8004424 <cleanup_stdio+0x10>
 8004420:	f000 fea4 	bl	800516c <_fflush_r>
 8004424:	68a1      	ldr	r1, [r4, #8]
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <cleanup_stdio+0x38>)
 8004428:	4299      	cmp	r1, r3
 800442a:	d002      	beq.n	8004432 <cleanup_stdio+0x1e>
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fe9d 	bl	800516c <_fflush_r>
 8004432:	68e1      	ldr	r1, [r4, #12]
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <cleanup_stdio+0x3c>)
 8004436:	4299      	cmp	r1, r3
 8004438:	d004      	beq.n	8004444 <cleanup_stdio+0x30>
 800443a:	4620      	mov	r0, r4
 800443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004440:	f000 be94 	b.w	800516c <_fflush_r>
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	200001dc 	.word	0x200001dc
 800444c:	20000244 	.word	0x20000244
 8004450:	200002ac 	.word	0x200002ac

08004454 <global_stdio_init.part.0>:
 8004454:	b510      	push	{r4, lr}
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <global_stdio_init.part.0+0x30>)
 8004458:	4c0b      	ldr	r4, [pc, #44]	; (8004488 <global_stdio_init.part.0+0x34>)
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <global_stdio_init.part.0+0x38>)
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	4620      	mov	r0, r4
 8004460:	2200      	movs	r2, #0
 8004462:	2104      	movs	r1, #4
 8004464:	f7ff ff94 	bl	8004390 <std>
 8004468:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800446c:	2201      	movs	r2, #1
 800446e:	2109      	movs	r1, #9
 8004470:	f7ff ff8e 	bl	8004390 <std>
 8004474:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004478:	2202      	movs	r2, #2
 800447a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447e:	2112      	movs	r1, #18
 8004480:	f7ff bf86 	b.w	8004390 <std>
 8004484:	20000314 	.word	0x20000314
 8004488:	200001dc 	.word	0x200001dc
 800448c:	080043fd 	.word	0x080043fd

08004490 <__sfp_lock_acquire>:
 8004490:	4801      	ldr	r0, [pc, #4]	; (8004498 <__sfp_lock_acquire+0x8>)
 8004492:	f000 ba16 	b.w	80048c2 <__retarget_lock_acquire_recursive>
 8004496:	bf00      	nop
 8004498:	2000031d 	.word	0x2000031d

0800449c <__sfp_lock_release>:
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <__sfp_lock_release+0x8>)
 800449e:	f000 ba11 	b.w	80048c4 <__retarget_lock_release_recursive>
 80044a2:	bf00      	nop
 80044a4:	2000031d 	.word	0x2000031d

080044a8 <__sinit>:
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4604      	mov	r4, r0
 80044ac:	f7ff fff0 	bl	8004490 <__sfp_lock_acquire>
 80044b0:	6a23      	ldr	r3, [r4, #32]
 80044b2:	b11b      	cbz	r3, 80044bc <__sinit+0x14>
 80044b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b8:	f7ff bff0 	b.w	800449c <__sfp_lock_release>
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__sinit+0x28>)
 80044be:	6223      	str	r3, [r4, #32]
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__sinit+0x2c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f5      	bne.n	80044b4 <__sinit+0xc>
 80044c8:	f7ff ffc4 	bl	8004454 <global_stdio_init.part.0>
 80044cc:	e7f2      	b.n	80044b4 <__sinit+0xc>
 80044ce:	bf00      	nop
 80044d0:	08004415 	.word	0x08004415
 80044d4:	20000314 	.word	0x20000314

080044d8 <_fwalk_sglue>:
 80044d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044dc:	4607      	mov	r7, r0
 80044de:	4688      	mov	r8, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	2600      	movs	r6, #0
 80044e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044e8:	f1b9 0901 	subs.w	r9, r9, #1
 80044ec:	d505      	bpl.n	80044fa <_fwalk_sglue+0x22>
 80044ee:	6824      	ldr	r4, [r4, #0]
 80044f0:	2c00      	cmp	r4, #0
 80044f2:	d1f7      	bne.n	80044e4 <_fwalk_sglue+0xc>
 80044f4:	4630      	mov	r0, r6
 80044f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044fa:	89ab      	ldrh	r3, [r5, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d907      	bls.n	8004510 <_fwalk_sglue+0x38>
 8004500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004504:	3301      	adds	r3, #1
 8004506:	d003      	beq.n	8004510 <_fwalk_sglue+0x38>
 8004508:	4629      	mov	r1, r5
 800450a:	4638      	mov	r0, r7
 800450c:	47c0      	blx	r8
 800450e:	4306      	orrs	r6, r0
 8004510:	3568      	adds	r5, #104	; 0x68
 8004512:	e7e9      	b.n	80044e8 <_fwalk_sglue+0x10>

08004514 <iprintf>:
 8004514:	b40f      	push	{r0, r1, r2, r3}
 8004516:	b507      	push	{r0, r1, r2, lr}
 8004518:	4906      	ldr	r1, [pc, #24]	; (8004534 <iprintf+0x20>)
 800451a:	ab04      	add	r3, sp, #16
 800451c:	6808      	ldr	r0, [r1, #0]
 800451e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004522:	6881      	ldr	r1, [r0, #8]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	f000 faf1 	bl	8004b0c <_vfiprintf_r>
 800452a:	b003      	add	sp, #12
 800452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004530:	b004      	add	sp, #16
 8004532:	4770      	bx	lr
 8004534:	20000064 	.word	0x20000064

08004538 <putchar>:
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <putchar+0xc>)
 800453a:	4601      	mov	r1, r0
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	6882      	ldr	r2, [r0, #8]
 8004540:	f000 be9e 	b.w	8005280 <_putc_r>
 8004544:	20000064 	.word	0x20000064

08004548 <_puts_r>:
 8004548:	6a03      	ldr	r3, [r0, #32]
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	6884      	ldr	r4, [r0, #8]
 800454e:	4605      	mov	r5, r0
 8004550:	460e      	mov	r6, r1
 8004552:	b90b      	cbnz	r3, 8004558 <_puts_r+0x10>
 8004554:	f7ff ffa8 	bl	80044a8 <__sinit>
 8004558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800455a:	07db      	lsls	r3, r3, #31
 800455c:	d405      	bmi.n	800456a <_puts_r+0x22>
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	0598      	lsls	r0, r3, #22
 8004562:	d402      	bmi.n	800456a <_puts_r+0x22>
 8004564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004566:	f000 f9ac 	bl	80048c2 <__retarget_lock_acquire_recursive>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	0719      	lsls	r1, r3, #28
 800456e:	d513      	bpl.n	8004598 <_puts_r+0x50>
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	b18b      	cbz	r3, 8004598 <_puts_r+0x50>
 8004574:	3e01      	subs	r6, #1
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800457c:	3b01      	subs	r3, #1
 800457e:	60a3      	str	r3, [r4, #8]
 8004580:	b9e9      	cbnz	r1, 80045be <_puts_r+0x76>
 8004582:	2b00      	cmp	r3, #0
 8004584:	da2e      	bge.n	80045e4 <_puts_r+0x9c>
 8004586:	4622      	mov	r2, r4
 8004588:	210a      	movs	r1, #10
 800458a:	4628      	mov	r0, r5
 800458c:	f000 f87b 	bl	8004686 <__swbuf_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d007      	beq.n	80045a4 <_puts_r+0x5c>
 8004594:	250a      	movs	r5, #10
 8004596:	e007      	b.n	80045a8 <_puts_r+0x60>
 8004598:	4621      	mov	r1, r4
 800459a:	4628      	mov	r0, r5
 800459c:	f000 f8b0 	bl	8004700 <__swsetup_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d0e7      	beq.n	8004574 <_puts_r+0x2c>
 80045a4:	f04f 35ff 	mov.w	r5, #4294967295
 80045a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045aa:	07da      	lsls	r2, r3, #31
 80045ac:	d405      	bmi.n	80045ba <_puts_r+0x72>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	059b      	lsls	r3, r3, #22
 80045b2:	d402      	bmi.n	80045ba <_puts_r+0x72>
 80045b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045b6:	f000 f985 	bl	80048c4 <__retarget_lock_release_recursive>
 80045ba:	4628      	mov	r0, r5
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da04      	bge.n	80045cc <_puts_r+0x84>
 80045c2:	69a2      	ldr	r2, [r4, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	dc06      	bgt.n	80045d6 <_puts_r+0x8e>
 80045c8:	290a      	cmp	r1, #10
 80045ca:	d004      	beq.n	80045d6 <_puts_r+0x8e>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	6022      	str	r2, [r4, #0]
 80045d2:	7019      	strb	r1, [r3, #0]
 80045d4:	e7cf      	b.n	8004576 <_puts_r+0x2e>
 80045d6:	4622      	mov	r2, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f854 	bl	8004686 <__swbuf_r>
 80045de:	3001      	adds	r0, #1
 80045e0:	d1c9      	bne.n	8004576 <_puts_r+0x2e>
 80045e2:	e7df      	b.n	80045a4 <_puts_r+0x5c>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	250a      	movs	r5, #10
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	6022      	str	r2, [r4, #0]
 80045ec:	701d      	strb	r5, [r3, #0]
 80045ee:	e7db      	b.n	80045a8 <_puts_r+0x60>

080045f0 <puts>:
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <puts+0xc>)
 80045f2:	4601      	mov	r1, r0
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	f7ff bfa7 	b.w	8004548 <_puts_r>
 80045fa:	bf00      	nop
 80045fc:	20000064 	.word	0x20000064

08004600 <__sread>:
 8004600:	b510      	push	{r4, lr}
 8004602:	460c      	mov	r4, r1
 8004604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004608:	f000 f90c 	bl	8004824 <_read_r>
 800460c:	2800      	cmp	r0, #0
 800460e:	bfab      	itete	ge
 8004610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004612:	89a3      	ldrhlt	r3, [r4, #12]
 8004614:	181b      	addge	r3, r3, r0
 8004616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800461a:	bfac      	ite	ge
 800461c:	6563      	strge	r3, [r4, #84]	; 0x54
 800461e:	81a3      	strhlt	r3, [r4, #12]
 8004620:	bd10      	pop	{r4, pc}

08004622 <__swrite>:
 8004622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004626:	461f      	mov	r7, r3
 8004628:	898b      	ldrh	r3, [r1, #12]
 800462a:	05db      	lsls	r3, r3, #23
 800462c:	4605      	mov	r5, r0
 800462e:	460c      	mov	r4, r1
 8004630:	4616      	mov	r6, r2
 8004632:	d505      	bpl.n	8004640 <__swrite+0x1e>
 8004634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004638:	2302      	movs	r3, #2
 800463a:	2200      	movs	r2, #0
 800463c:	f000 f8e0 	bl	8004800 <_lseek_r>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	4632      	mov	r2, r6
 800464e:	463b      	mov	r3, r7
 8004650:	4628      	mov	r0, r5
 8004652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004656:	f000 b8f7 	b.w	8004848 <_write_r>

0800465a <__sseek>:
 800465a:	b510      	push	{r4, lr}
 800465c:	460c      	mov	r4, r1
 800465e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004662:	f000 f8cd 	bl	8004800 <_lseek_r>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	bf15      	itete	ne
 800466c:	6560      	strne	r0, [r4, #84]	; 0x54
 800466e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004676:	81a3      	strheq	r3, [r4, #12]
 8004678:	bf18      	it	ne
 800467a:	81a3      	strhne	r3, [r4, #12]
 800467c:	bd10      	pop	{r4, pc}

0800467e <__sclose>:
 800467e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004682:	f000 b8ad 	b.w	80047e0 <_close_r>

08004686 <__swbuf_r>:
 8004686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004688:	460e      	mov	r6, r1
 800468a:	4614      	mov	r4, r2
 800468c:	4605      	mov	r5, r0
 800468e:	b118      	cbz	r0, 8004698 <__swbuf_r+0x12>
 8004690:	6a03      	ldr	r3, [r0, #32]
 8004692:	b90b      	cbnz	r3, 8004698 <__swbuf_r+0x12>
 8004694:	f7ff ff08 	bl	80044a8 <__sinit>
 8004698:	69a3      	ldr	r3, [r4, #24]
 800469a:	60a3      	str	r3, [r4, #8]
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	071a      	lsls	r2, r3, #28
 80046a0:	d525      	bpl.n	80046ee <__swbuf_r+0x68>
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	b31b      	cbz	r3, 80046ee <__swbuf_r+0x68>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	6922      	ldr	r2, [r4, #16]
 80046aa:	1a98      	subs	r0, r3, r2
 80046ac:	6963      	ldr	r3, [r4, #20]
 80046ae:	b2f6      	uxtb	r6, r6
 80046b0:	4283      	cmp	r3, r0
 80046b2:	4637      	mov	r7, r6
 80046b4:	dc04      	bgt.n	80046c0 <__swbuf_r+0x3a>
 80046b6:	4621      	mov	r1, r4
 80046b8:	4628      	mov	r0, r5
 80046ba:	f000 fd57 	bl	800516c <_fflush_r>
 80046be:	b9e0      	cbnz	r0, 80046fa <__swbuf_r+0x74>
 80046c0:	68a3      	ldr	r3, [r4, #8]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	60a3      	str	r3, [r4, #8]
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	6022      	str	r2, [r4, #0]
 80046cc:	701e      	strb	r6, [r3, #0]
 80046ce:	6962      	ldr	r2, [r4, #20]
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d004      	beq.n	80046e0 <__swbuf_r+0x5a>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	07db      	lsls	r3, r3, #31
 80046da:	d506      	bpl.n	80046ea <__swbuf_r+0x64>
 80046dc:	2e0a      	cmp	r6, #10
 80046de:	d104      	bne.n	80046ea <__swbuf_r+0x64>
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fd42 	bl	800516c <_fflush_r>
 80046e8:	b938      	cbnz	r0, 80046fa <__swbuf_r+0x74>
 80046ea:	4638      	mov	r0, r7
 80046ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f805 	bl	8004700 <__swsetup_r>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d0d5      	beq.n	80046a6 <__swbuf_r+0x20>
 80046fa:	f04f 37ff 	mov.w	r7, #4294967295
 80046fe:	e7f4      	b.n	80046ea <__swbuf_r+0x64>

08004700 <__swsetup_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4b2a      	ldr	r3, [pc, #168]	; (80047ac <__swsetup_r+0xac>)
 8004704:	4605      	mov	r5, r0
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	460c      	mov	r4, r1
 800470a:	b118      	cbz	r0, 8004714 <__swsetup_r+0x14>
 800470c:	6a03      	ldr	r3, [r0, #32]
 800470e:	b90b      	cbnz	r3, 8004714 <__swsetup_r+0x14>
 8004710:	f7ff feca 	bl	80044a8 <__sinit>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800471a:	0718      	lsls	r0, r3, #28
 800471c:	d422      	bmi.n	8004764 <__swsetup_r+0x64>
 800471e:	06d9      	lsls	r1, r3, #27
 8004720:	d407      	bmi.n	8004732 <__swsetup_r+0x32>
 8004722:	2309      	movs	r3, #9
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	e034      	b.n	800479c <__swsetup_r+0x9c>
 8004732:	0758      	lsls	r0, r3, #29
 8004734:	d512      	bpl.n	800475c <__swsetup_r+0x5c>
 8004736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004738:	b141      	cbz	r1, 800474c <__swsetup_r+0x4c>
 800473a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800473e:	4299      	cmp	r1, r3
 8004740:	d002      	beq.n	8004748 <__swsetup_r+0x48>
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f8c0 	bl	80048c8 <_free_r>
 8004748:	2300      	movs	r3, #0
 800474a:	6363      	str	r3, [r4, #52]	; 0x34
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	2300      	movs	r3, #0
 8004756:	6063      	str	r3, [r4, #4]
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	b94b      	cbnz	r3, 800477c <__swsetup_r+0x7c>
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800476e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004772:	d003      	beq.n	800477c <__swsetup_r+0x7c>
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f000 fd46 	bl	8005208 <__smakebuf_r>
 800477c:	89a0      	ldrh	r0, [r4, #12]
 800477e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004782:	f010 0301 	ands.w	r3, r0, #1
 8004786:	d00a      	beq.n	800479e <__swsetup_r+0x9e>
 8004788:	2300      	movs	r3, #0
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	6963      	ldr	r3, [r4, #20]
 800478e:	425b      	negs	r3, r3
 8004790:	61a3      	str	r3, [r4, #24]
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	b943      	cbnz	r3, 80047a8 <__swsetup_r+0xa8>
 8004796:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800479a:	d1c4      	bne.n	8004726 <__swsetup_r+0x26>
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	0781      	lsls	r1, r0, #30
 80047a0:	bf58      	it	pl
 80047a2:	6963      	ldrpl	r3, [r4, #20]
 80047a4:	60a3      	str	r3, [r4, #8]
 80047a6:	e7f4      	b.n	8004792 <__swsetup_r+0x92>
 80047a8:	2000      	movs	r0, #0
 80047aa:	e7f7      	b.n	800479c <__swsetup_r+0x9c>
 80047ac:	20000064 	.word	0x20000064

080047b0 <memcmp>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	3901      	subs	r1, #1
 80047b4:	4402      	add	r2, r0
 80047b6:	4290      	cmp	r0, r2
 80047b8:	d101      	bne.n	80047be <memcmp+0xe>
 80047ba:	2000      	movs	r0, #0
 80047bc:	e005      	b.n	80047ca <memcmp+0x1a>
 80047be:	7803      	ldrb	r3, [r0, #0]
 80047c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d001      	beq.n	80047cc <memcmp+0x1c>
 80047c8:	1b18      	subs	r0, r3, r4
 80047ca:	bd10      	pop	{r4, pc}
 80047cc:	3001      	adds	r0, #1
 80047ce:	e7f2      	b.n	80047b6 <memcmp+0x6>

080047d0 <memset>:
 80047d0:	4402      	add	r2, r0
 80047d2:	4603      	mov	r3, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <_close_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4d06      	ldr	r5, [pc, #24]	; (80047fc <_close_r+0x1c>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fd8b 	bl	8001306 <_close>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_close_r+0x1a>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_close_r+0x1a>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20000318 	.word	0x20000318

08004800 <_lseek_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d07      	ldr	r5, [pc, #28]	; (8004820 <_lseek_r+0x20>)
 8004804:	4604      	mov	r4, r0
 8004806:	4608      	mov	r0, r1
 8004808:	4611      	mov	r1, r2
 800480a:	2200      	movs	r2, #0
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7fc fda0 	bl	8001354 <_lseek>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_lseek_r+0x1e>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_lseek_r+0x1e>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000318 	.word	0x20000318

08004824 <_read_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d07      	ldr	r5, [pc, #28]	; (8004844 <_read_r+0x20>)
 8004828:	4604      	mov	r4, r0
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	2200      	movs	r2, #0
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7fc fd4a 	bl	80012cc <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_read_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_read_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000318 	.word	0x20000318

08004848 <_write_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d07      	ldr	r5, [pc, #28]	; (8004868 <_write_r+0x20>)
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	2200      	movs	r2, #0
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fad8 	bl	8000e0c <_write>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_write_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_write_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000318 	.word	0x20000318

0800486c <__errno>:
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <__errno+0x8>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000064 	.word	0x20000064

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4d0d      	ldr	r5, [pc, #52]	; (80048b0 <__libc_init_array+0x38>)
 800487c:	4c0d      	ldr	r4, [pc, #52]	; (80048b4 <__libc_init_array+0x3c>)
 800487e:	1b64      	subs	r4, r4, r5
 8004880:	10a4      	asrs	r4, r4, #2
 8004882:	2600      	movs	r6, #0
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	4d0b      	ldr	r5, [pc, #44]	; (80048b8 <__libc_init_array+0x40>)
 800488a:	4c0c      	ldr	r4, [pc, #48]	; (80048bc <__libc_init_array+0x44>)
 800488c:	f000 fd5e 	bl	800534c <_init>
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	2600      	movs	r6, #0
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	0800553c 	.word	0x0800553c
 80048b4:	0800553c 	.word	0x0800553c
 80048b8:	0800553c 	.word	0x0800553c
 80048bc:	08005540 	.word	0x08005540

080048c0 <__retarget_lock_init_recursive>:
 80048c0:	4770      	bx	lr

080048c2 <__retarget_lock_acquire_recursive>:
 80048c2:	4770      	bx	lr

080048c4 <__retarget_lock_release_recursive>:
 80048c4:	4770      	bx	lr
	...

080048c8 <_free_r>:
 80048c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d044      	beq.n	8004958 <_free_r+0x90>
 80048ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d2:	9001      	str	r0, [sp, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f1a1 0404 	sub.w	r4, r1, #4
 80048da:	bfb8      	it	lt
 80048dc:	18e4      	addlt	r4, r4, r3
 80048de:	f000 f8df 	bl	8004aa0 <__malloc_lock>
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <_free_r+0x94>)
 80048e4:	9801      	ldr	r0, [sp, #4]
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	b933      	cbnz	r3, 80048f8 <_free_r+0x30>
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	6014      	str	r4, [r2, #0]
 80048ee:	b003      	add	sp, #12
 80048f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f4:	f000 b8da 	b.w	8004aac <__malloc_unlock>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d908      	bls.n	800490e <_free_r+0x46>
 80048fc:	6825      	ldr	r5, [r4, #0]
 80048fe:	1961      	adds	r1, r4, r5
 8004900:	428b      	cmp	r3, r1
 8004902:	bf01      	itttt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	1949      	addeq	r1, r1, r5
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	e7ed      	b.n	80048ea <_free_r+0x22>
 800490e:	461a      	mov	r2, r3
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b10b      	cbz	r3, 8004918 <_free_r+0x50>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x46>
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	1855      	adds	r5, r2, r1
 800491c:	42a5      	cmp	r5, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x70>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	4421      	add	r1, r4
 8004924:	1854      	adds	r4, r2, r1
 8004926:	42a3      	cmp	r3, r4
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	d1e0      	bne.n	80048ee <_free_r+0x26>
 800492c:	681c      	ldr	r4, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	440c      	add	r4, r1
 8004934:	6014      	str	r4, [r2, #0]
 8004936:	e7da      	b.n	80048ee <_free_r+0x26>
 8004938:	d902      	bls.n	8004940 <_free_r+0x78>
 800493a:	230c      	movs	r3, #12
 800493c:	6003      	str	r3, [r0, #0]
 800493e:	e7d6      	b.n	80048ee <_free_r+0x26>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	1961      	adds	r1, r4, r5
 8004944:	428b      	cmp	r3, r1
 8004946:	bf04      	itt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1949      	addeq	r1, r1, r5
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	6054      	str	r4, [r2, #4]
 8004956:	e7ca      	b.n	80048ee <_free_r+0x26>
 8004958:	b003      	add	sp, #12
 800495a:	bd30      	pop	{r4, r5, pc}
 800495c:	20000320 	.word	0x20000320

08004960 <sbrk_aligned>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4e0e      	ldr	r6, [pc, #56]	; (800499c <sbrk_aligned+0x3c>)
 8004964:	460c      	mov	r4, r1
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	4605      	mov	r5, r0
 800496a:	b911      	cbnz	r1, 8004972 <sbrk_aligned+0x12>
 800496c:	f000 fcde 	bl	800532c <_sbrk_r>
 8004970:	6030      	str	r0, [r6, #0]
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 fcd9 	bl	800532c <_sbrk_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	d00a      	beq.n	8004994 <sbrk_aligned+0x34>
 800497e:	1cc4      	adds	r4, r0, #3
 8004980:	f024 0403 	bic.w	r4, r4, #3
 8004984:	42a0      	cmp	r0, r4
 8004986:	d007      	beq.n	8004998 <sbrk_aligned+0x38>
 8004988:	1a21      	subs	r1, r4, r0
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fcce 	bl	800532c <_sbrk_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d101      	bne.n	8004998 <sbrk_aligned+0x38>
 8004994:	f04f 34ff 	mov.w	r4, #4294967295
 8004998:	4620      	mov	r0, r4
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	20000324 	.word	0x20000324

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4607      	mov	r7, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d905      	bls.n	80049c8 <_malloc_r+0x28>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	2600      	movs	r6, #0
 80049c2:	4630      	mov	r0, r6
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a9c <_malloc_r+0xfc>
 80049cc:	f000 f868 	bl	8004aa0 <__malloc_lock>
 80049d0:	f8d8 3000 	ldr.w	r3, [r8]
 80049d4:	461c      	mov	r4, r3
 80049d6:	bb5c      	cbnz	r4, 8004a30 <_malloc_r+0x90>
 80049d8:	4629      	mov	r1, r5
 80049da:	4638      	mov	r0, r7
 80049dc:	f7ff ffc0 	bl	8004960 <sbrk_aligned>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	4604      	mov	r4, r0
 80049e4:	d155      	bne.n	8004a92 <_malloc_r+0xf2>
 80049e6:	f8d8 4000 	ldr.w	r4, [r8]
 80049ea:	4626      	mov	r6, r4
 80049ec:	2e00      	cmp	r6, #0
 80049ee:	d145      	bne.n	8004a7c <_malloc_r+0xdc>
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d048      	beq.n	8004a86 <_malloc_r+0xe6>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	4631      	mov	r1, r6
 80049f8:	4638      	mov	r0, r7
 80049fa:	eb04 0903 	add.w	r9, r4, r3
 80049fe:	f000 fc95 	bl	800532c <_sbrk_r>
 8004a02:	4581      	cmp	r9, r0
 8004a04:	d13f      	bne.n	8004a86 <_malloc_r+0xe6>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	1a6d      	subs	r5, r5, r1
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7ff ffa7 	bl	8004960 <sbrk_aligned>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d037      	beq.n	8004a86 <_malloc_r+0xe6>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	442b      	add	r3, r5
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d038      	beq.n	8004a96 <_malloc_r+0xf6>
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	d12b      	bne.n	8004a82 <_malloc_r+0xe2>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	e00f      	b.n	8004a50 <_malloc_r+0xb0>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	d41f      	bmi.n	8004a76 <_malloc_r+0xd6>
 8004a36:	2a0b      	cmp	r2, #11
 8004a38:	d917      	bls.n	8004a6a <_malloc_r+0xca>
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	6059      	strne	r1, [r3, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	bf08      	it	eq
 8004a48:	f8c8 1000 	streq.w	r1, [r8]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4638      	mov	r0, r7
 8004a52:	f104 060b 	add.w	r6, r4, #11
 8004a56:	f000 f829 	bl	8004aac <__malloc_unlock>
 8004a5a:	f026 0607 	bic.w	r6, r6, #7
 8004a5e:	1d23      	adds	r3, r4, #4
 8004a60:	1af2      	subs	r2, r6, r3
 8004a62:	d0ae      	beq.n	80049c2 <_malloc_r+0x22>
 8004a64:	1b9b      	subs	r3, r3, r6
 8004a66:	50a3      	str	r3, [r4, r2]
 8004a68:	e7ab      	b.n	80049c2 <_malloc_r+0x22>
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	6862      	ldr	r2, [r4, #4]
 8004a6e:	d1dd      	bne.n	8004a2c <_malloc_r+0x8c>
 8004a70:	f8c8 2000 	str.w	r2, [r8]
 8004a74:	e7ec      	b.n	8004a50 <_malloc_r+0xb0>
 8004a76:	4623      	mov	r3, r4
 8004a78:	6864      	ldr	r4, [r4, #4]
 8004a7a:	e7ac      	b.n	80049d6 <_malloc_r+0x36>
 8004a7c:	4634      	mov	r4, r6
 8004a7e:	6876      	ldr	r6, [r6, #4]
 8004a80:	e7b4      	b.n	80049ec <_malloc_r+0x4c>
 8004a82:	4613      	mov	r3, r2
 8004a84:	e7cc      	b.n	8004a20 <_malloc_r+0x80>
 8004a86:	230c      	movs	r3, #12
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f000 f80e 	bl	8004aac <__malloc_unlock>
 8004a90:	e797      	b.n	80049c2 <_malloc_r+0x22>
 8004a92:	6025      	str	r5, [r4, #0]
 8004a94:	e7dc      	b.n	8004a50 <_malloc_r+0xb0>
 8004a96:	605b      	str	r3, [r3, #4]
 8004a98:	deff      	udf	#255	; 0xff
 8004a9a:	bf00      	nop
 8004a9c:	20000320 	.word	0x20000320

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff bf0e 	b.w	80048c2 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	2000031c 	.word	0x2000031c

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff bf09 	b.w	80048c4 <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	2000031c 	.word	0x2000031c

08004ab8 <__sfputc_r>:
 8004ab8:	6893      	ldr	r3, [r2, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	b410      	push	{r4}
 8004ac0:	6093      	str	r3, [r2, #8]
 8004ac2:	da08      	bge.n	8004ad6 <__sfputc_r+0x1e>
 8004ac4:	6994      	ldr	r4, [r2, #24]
 8004ac6:	42a3      	cmp	r3, r4
 8004ac8:	db01      	blt.n	8004ace <__sfputc_r+0x16>
 8004aca:	290a      	cmp	r1, #10
 8004acc:	d103      	bne.n	8004ad6 <__sfputc_r+0x1e>
 8004ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad2:	f7ff bdd8 	b.w	8004686 <__swbuf_r>
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	1c58      	adds	r0, r3, #1
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	7019      	strb	r1, [r3, #0]
 8004ade:	4608      	mov	r0, r1
 8004ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <__sfputs_r>:
 8004ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae8:	4606      	mov	r6, r0
 8004aea:	460f      	mov	r7, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	18d5      	adds	r5, r2, r3
 8004af0:	42ac      	cmp	r4, r5
 8004af2:	d101      	bne.n	8004af8 <__sfputs_r+0x12>
 8004af4:	2000      	movs	r0, #0
 8004af6:	e007      	b.n	8004b08 <__sfputs_r+0x22>
 8004af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afc:	463a      	mov	r2, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff ffda 	bl	8004ab8 <__sfputc_r>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d1f3      	bne.n	8004af0 <__sfputs_r+0xa>
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b0c <_vfiprintf_r>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	460d      	mov	r5, r1
 8004b12:	b09d      	sub	sp, #116	; 0x74
 8004b14:	4614      	mov	r4, r2
 8004b16:	4698      	mov	r8, r3
 8004b18:	4606      	mov	r6, r0
 8004b1a:	b118      	cbz	r0, 8004b24 <_vfiprintf_r+0x18>
 8004b1c:	6a03      	ldr	r3, [r0, #32]
 8004b1e:	b90b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x18>
 8004b20:	f7ff fcc2 	bl	80044a8 <__sinit>
 8004b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_vfiprintf_r+0x2a>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_vfiprintf_r+0x2a>
 8004b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b32:	f7ff fec6 	bl	80048c2 <__retarget_lock_acquire_recursive>
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	d501      	bpl.n	8004b40 <_vfiprintf_r+0x34>
 8004b3c:	692b      	ldr	r3, [r5, #16]
 8004b3e:	b99b      	cbnz	r3, 8004b68 <_vfiprintf_r+0x5c>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff fddc 	bl	8004700 <__swsetup_r>
 8004b48:	b170      	cbz	r0, 8004b68 <_vfiprintf_r+0x5c>
 8004b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b4c:	07dc      	lsls	r4, r3, #31
 8004b4e:	d504      	bpl.n	8004b5a <_vfiprintf_r+0x4e>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	b01d      	add	sp, #116	; 0x74
 8004b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5a:	89ab      	ldrh	r3, [r5, #12]
 8004b5c:	0598      	lsls	r0, r3, #22
 8004b5e:	d4f7      	bmi.n	8004b50 <_vfiprintf_r+0x44>
 8004b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b62:	f7ff feaf 	bl	80048c4 <__retarget_lock_release_recursive>
 8004b66:	e7f3      	b.n	8004b50 <_vfiprintf_r+0x44>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b76:	2330      	movs	r3, #48	; 0x30
 8004b78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004d2c <_vfiprintf_r+0x220>
 8004b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b80:	f04f 0901 	mov.w	r9, #1
 8004b84:	4623      	mov	r3, r4
 8004b86:	469a      	mov	sl, r3
 8004b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8c:	b10a      	cbz	r2, 8004b92 <_vfiprintf_r+0x86>
 8004b8e:	2a25      	cmp	r2, #37	; 0x25
 8004b90:	d1f9      	bne.n	8004b86 <_vfiprintf_r+0x7a>
 8004b92:	ebba 0b04 	subs.w	fp, sl, r4
 8004b96:	d00b      	beq.n	8004bb0 <_vfiprintf_r+0xa4>
 8004b98:	465b      	mov	r3, fp
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7ff ffa1 	bl	8004ae6 <__sfputs_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f000 80a9 	beq.w	8004cfc <_vfiprintf_r+0x1f0>
 8004baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bac:	445a      	add	r2, fp
 8004bae:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a1 	beq.w	8004cfc <_vfiprintf_r+0x1f0>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc4:	f10a 0a01 	add.w	sl, sl, #1
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	9307      	str	r3, [sp, #28]
 8004bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd2:	4654      	mov	r4, sl
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bda:	4854      	ldr	r0, [pc, #336]	; (8004d2c <_vfiprintf_r+0x220>)
 8004bdc:	f7fb fb18 	bl	8000210 <memchr>
 8004be0:	9a04      	ldr	r2, [sp, #16]
 8004be2:	b9d8      	cbnz	r0, 8004c1c <_vfiprintf_r+0x110>
 8004be4:	06d1      	lsls	r1, r2, #27
 8004be6:	bf44      	itt	mi
 8004be8:	2320      	movmi	r3, #32
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bee:	0713      	lsls	r3, r2, #28
 8004bf0:	bf44      	itt	mi
 8004bf2:	232b      	movmi	r3, #43	; 0x2b
 8004bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bfe:	d015      	beq.n	8004c2c <_vfiprintf_r+0x120>
 8004c00:	9a07      	ldr	r2, [sp, #28]
 8004c02:	4654      	mov	r4, sl
 8004c04:	2000      	movs	r0, #0
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c10:	3b30      	subs	r3, #48	; 0x30
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	d94d      	bls.n	8004cb2 <_vfiprintf_r+0x1a6>
 8004c16:	b1b0      	cbz	r0, 8004c46 <_vfiprintf_r+0x13a>
 8004c18:	9207      	str	r2, [sp, #28]
 8004c1a:	e014      	b.n	8004c46 <_vfiprintf_r+0x13a>
 8004c1c:	eba0 0308 	sub.w	r3, r0, r8
 8004c20:	fa09 f303 	lsl.w	r3, r9, r3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	46a2      	mov	sl, r4
 8004c2a:	e7d2      	b.n	8004bd2 <_vfiprintf_r+0xc6>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	1d19      	adds	r1, r3, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	9103      	str	r1, [sp, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfbb      	ittet	lt
 8004c38:	425b      	neglt	r3, r3
 8004c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c3e:	9307      	strge	r3, [sp, #28]
 8004c40:	9307      	strlt	r3, [sp, #28]
 8004c42:	bfb8      	it	lt
 8004c44:	9204      	strlt	r2, [sp, #16]
 8004c46:	7823      	ldrb	r3, [r4, #0]
 8004c48:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4a:	d10c      	bne.n	8004c66 <_vfiprintf_r+0x15a>
 8004c4c:	7863      	ldrb	r3, [r4, #1]
 8004c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c50:	d134      	bne.n	8004cbc <_vfiprintf_r+0x1b0>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	9203      	str	r2, [sp, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfb8      	it	lt
 8004c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c62:	3402      	adds	r4, #2
 8004c64:	9305      	str	r3, [sp, #20]
 8004c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d3c <_vfiprintf_r+0x230>
 8004c6a:	7821      	ldrb	r1, [r4, #0]
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	4650      	mov	r0, sl
 8004c70:	f7fb face 	bl	8000210 <memchr>
 8004c74:	b138      	cbz	r0, 8004c86 <_vfiprintf_r+0x17a>
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	eba0 000a 	sub.w	r0, r0, sl
 8004c7c:	2240      	movs	r2, #64	; 0x40
 8004c7e:	4082      	lsls	r2, r0
 8004c80:	4313      	orrs	r3, r2
 8004c82:	3401      	adds	r4, #1
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8a:	4829      	ldr	r0, [pc, #164]	; (8004d30 <_vfiprintf_r+0x224>)
 8004c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c90:	2206      	movs	r2, #6
 8004c92:	f7fb fabd 	bl	8000210 <memchr>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d03f      	beq.n	8004d1a <_vfiprintf_r+0x20e>
 8004c9a:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <_vfiprintf_r+0x228>)
 8004c9c:	bb1b      	cbnz	r3, 8004ce6 <_vfiprintf_r+0x1da>
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	3307      	adds	r3, #7
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	9303      	str	r3, [sp, #12]
 8004caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cac:	443b      	add	r3, r7
 8004cae:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb0:	e768      	b.n	8004b84 <_vfiprintf_r+0x78>
 8004cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e7a6      	b.n	8004c0a <_vfiprintf_r+0xfe>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	3401      	adds	r4, #1
 8004cc0:	9305      	str	r3, [sp, #20]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f04f 0c0a 	mov.w	ip, #10
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cce:	3a30      	subs	r2, #48	; 0x30
 8004cd0:	2a09      	cmp	r2, #9
 8004cd2:	d903      	bls.n	8004cdc <_vfiprintf_r+0x1d0>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0c6      	beq.n	8004c66 <_vfiprintf_r+0x15a>
 8004cd8:	9105      	str	r1, [sp, #20]
 8004cda:	e7c4      	b.n	8004c66 <_vfiprintf_r+0x15a>
 8004cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e7f0      	b.n	8004cc8 <_vfiprintf_r+0x1bc>
 8004ce6:	ab03      	add	r3, sp, #12
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	462a      	mov	r2, r5
 8004cec:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <_vfiprintf_r+0x22c>)
 8004cee:	a904      	add	r1, sp, #16
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f3af 8000 	nop.w
 8004cf6:	4607      	mov	r7, r0
 8004cf8:	1c78      	adds	r0, r7, #1
 8004cfa:	d1d6      	bne.n	8004caa <_vfiprintf_r+0x19e>
 8004cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cfe:	07d9      	lsls	r1, r3, #31
 8004d00:	d405      	bmi.n	8004d0e <_vfiprintf_r+0x202>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	059a      	lsls	r2, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_vfiprintf_r+0x202>
 8004d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d0a:	f7ff fddb 	bl	80048c4 <__retarget_lock_release_recursive>
 8004d0e:	89ab      	ldrh	r3, [r5, #12]
 8004d10:	065b      	lsls	r3, r3, #25
 8004d12:	f53f af1d 	bmi.w	8004b50 <_vfiprintf_r+0x44>
 8004d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d18:	e71c      	b.n	8004b54 <_vfiprintf_r+0x48>
 8004d1a:	ab03      	add	r3, sp, #12
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	462a      	mov	r2, r5
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <_vfiprintf_r+0x22c>)
 8004d22:	a904      	add	r1, sp, #16
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f879 	bl	8004e1c <_printf_i>
 8004d2a:	e7e4      	b.n	8004cf6 <_vfiprintf_r+0x1ea>
 8004d2c:	08005500 	.word	0x08005500
 8004d30:	0800550a 	.word	0x0800550a
 8004d34:	00000000 	.word	0x00000000
 8004d38:	08004ae7 	.word	0x08004ae7
 8004d3c:	08005506 	.word	0x08005506

08004d40 <_printf_common>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	4616      	mov	r6, r2
 8004d46:	4699      	mov	r9, r3
 8004d48:	688a      	ldr	r2, [r1, #8]
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfb8      	it	lt
 8004d54:	4613      	movlt	r3, r2
 8004d56:	6033      	str	r3, [r6, #0]
 8004d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	b10a      	cbz	r2, 8004d66 <_printf_common+0x26>
 8004d62:	3301      	adds	r3, #1
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	0699      	lsls	r1, r3, #26
 8004d6a:	bf42      	ittt	mi
 8004d6c:	6833      	ldrmi	r3, [r6, #0]
 8004d6e:	3302      	addmi	r3, #2
 8004d70:	6033      	strmi	r3, [r6, #0]
 8004d72:	6825      	ldr	r5, [r4, #0]
 8004d74:	f015 0506 	ands.w	r5, r5, #6
 8004d78:	d106      	bne.n	8004d88 <_printf_common+0x48>
 8004d7a:	f104 0a19 	add.w	sl, r4, #25
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	6832      	ldr	r2, [r6, #0]
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dc26      	bgt.n	8004dd6 <_printf_common+0x96>
 8004d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d8c:	1e13      	subs	r3, r2, #0
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	bf18      	it	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	0692      	lsls	r2, r2, #26
 8004d96:	d42b      	bmi.n	8004df0 <_printf_common+0xb0>
 8004d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	4638      	mov	r0, r7
 8004da0:	47c0      	blx	r8
 8004da2:	3001      	adds	r0, #1
 8004da4:	d01e      	beq.n	8004de4 <_printf_common+0xa4>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	f003 0306 	and.w	r3, r3, #6
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf02      	ittt	eq
 8004db2:	68e5      	ldreq	r5, [r4, #12]
 8004db4:	6833      	ldreq	r3, [r6, #0]
 8004db6:	1aed      	subeq	r5, r5, r3
 8004db8:	68a3      	ldr	r3, [r4, #8]
 8004dba:	bf0c      	ite	eq
 8004dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc0:	2500      	movne	r5, #0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bfc4      	itt	gt
 8004dc6:	1a9b      	subgt	r3, r3, r2
 8004dc8:	18ed      	addgt	r5, r5, r3
 8004dca:	2600      	movs	r6, #0
 8004dcc:	341a      	adds	r4, #26
 8004dce:	42b5      	cmp	r5, r6
 8004dd0:	d11a      	bne.n	8004e08 <_printf_common+0xc8>
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e008      	b.n	8004de8 <_printf_common+0xa8>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4652      	mov	r2, sl
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4638      	mov	r0, r7
 8004dde:	47c0      	blx	r8
 8004de0:	3001      	adds	r0, #1
 8004de2:	d103      	bne.n	8004dec <_printf_common+0xac>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	3501      	adds	r5, #1
 8004dee:	e7c6      	b.n	8004d7e <_printf_common+0x3e>
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	2030      	movs	r0, #48	; 0x30
 8004df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dfa:	4422      	add	r2, r4
 8004dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e04:	3302      	adds	r3, #2
 8004e06:	e7c7      	b.n	8004d98 <_printf_common+0x58>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c0      	blx	r8
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0e6      	beq.n	8004de4 <_printf_common+0xa4>
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7d9      	b.n	8004dce <_printf_common+0x8e>
	...

08004e1c <_printf_i>:
 8004e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	7e0f      	ldrb	r7, [r1, #24]
 8004e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e24:	2f78      	cmp	r7, #120	; 0x78
 8004e26:	4691      	mov	r9, r2
 8004e28:	4680      	mov	r8, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	469a      	mov	sl, r3
 8004e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e32:	d807      	bhi.n	8004e44 <_printf_i+0x28>
 8004e34:	2f62      	cmp	r7, #98	; 0x62
 8004e36:	d80a      	bhi.n	8004e4e <_printf_i+0x32>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	f000 80d4 	beq.w	8004fe6 <_printf_i+0x1ca>
 8004e3e:	2f58      	cmp	r7, #88	; 0x58
 8004e40:	f000 80c0 	beq.w	8004fc4 <_printf_i+0x1a8>
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e4c:	e03a      	b.n	8004ec4 <_printf_i+0xa8>
 8004e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e52:	2b15      	cmp	r3, #21
 8004e54:	d8f6      	bhi.n	8004e44 <_printf_i+0x28>
 8004e56:	a101      	add	r1, pc, #4	; (adr r1, 8004e5c <_printf_i+0x40>)
 8004e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004e45 	.word	0x08004e45
 8004e68:	08004e45 	.word	0x08004e45
 8004e6c:	08004e45 	.word	0x08004e45
 8004e70:	08004e45 	.word	0x08004e45
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e45 	.word	0x08004e45
 8004e7c:	08004e45 	.word	0x08004e45
 8004e80:	08004e45 	.word	0x08004e45
 8004e84:	08004e45 	.word	0x08004e45
 8004e88:	08004fcd 	.word	0x08004fcd
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004f87 	.word	0x08004f87
 8004e94:	08004e45 	.word	0x08004e45
 8004e98:	08004e45 	.word	0x08004e45
 8004e9c:	08004fef 	.word	0x08004fef
 8004ea0:	08004e45 	.word	0x08004e45
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004e45 	.word	0x08004e45
 8004eac:	08004e45 	.word	0x08004e45
 8004eb0:	08004f8f 	.word	0x08004f8f
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	602a      	str	r2, [r5, #0]
 8004ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e09f      	b.n	8005008 <_printf_i+0x1ec>
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	0607      	lsls	r7, r0, #24
 8004ece:	f103 0104 	add.w	r1, r3, #4
 8004ed2:	6029      	str	r1, [r5, #0]
 8004ed4:	d501      	bpl.n	8004eda <_printf_i+0xbe>
 8004ed6:	681e      	ldr	r6, [r3, #0]
 8004ed8:	e003      	b.n	8004ee2 <_printf_i+0xc6>
 8004eda:	0646      	lsls	r6, r0, #25
 8004edc:	d5fb      	bpl.n	8004ed6 <_printf_i+0xba>
 8004ede:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	da03      	bge.n	8004eee <_printf_i+0xd2>
 8004ee6:	232d      	movs	r3, #45	; 0x2d
 8004ee8:	4276      	negs	r6, r6
 8004eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eee:	485a      	ldr	r0, [pc, #360]	; (8005058 <_printf_i+0x23c>)
 8004ef0:	230a      	movs	r3, #10
 8004ef2:	e012      	b.n	8004f1a <_printf_i+0xfe>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	1d19      	adds	r1, r3, #4
 8004efa:	6029      	str	r1, [r5, #0]
 8004efc:	0605      	lsls	r5, r0, #24
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0xe8>
 8004f00:	681e      	ldr	r6, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <_printf_i+0xee>
 8004f04:	0641      	lsls	r1, r0, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0xe4>
 8004f08:	881e      	ldrh	r6, [r3, #0]
 8004f0a:	4853      	ldr	r0, [pc, #332]	; (8005058 <_printf_i+0x23c>)
 8004f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f0e:	bf0c      	ite	eq
 8004f10:	2308      	moveq	r3, #8
 8004f12:	230a      	movne	r3, #10
 8004f14:	2100      	movs	r1, #0
 8004f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1a:	6865      	ldr	r5, [r4, #4]
 8004f1c:	60a5      	str	r5, [r4, #8]
 8004f1e:	2d00      	cmp	r5, #0
 8004f20:	bfa2      	ittt	ge
 8004f22:	6821      	ldrge	r1, [r4, #0]
 8004f24:	f021 0104 	bicge.w	r1, r1, #4
 8004f28:	6021      	strge	r1, [r4, #0]
 8004f2a:	b90e      	cbnz	r6, 8004f30 <_printf_i+0x114>
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	d04b      	beq.n	8004fc8 <_printf_i+0x1ac>
 8004f30:	4615      	mov	r5, r2
 8004f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f36:	fb03 6711 	mls	r7, r3, r1, r6
 8004f3a:	5dc7      	ldrb	r7, [r0, r7]
 8004f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f40:	4637      	mov	r7, r6
 8004f42:	42bb      	cmp	r3, r7
 8004f44:	460e      	mov	r6, r1
 8004f46:	d9f4      	bls.n	8004f32 <_printf_i+0x116>
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d10b      	bne.n	8004f64 <_printf_i+0x148>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	07de      	lsls	r6, r3, #31
 8004f50:	d508      	bpl.n	8004f64 <_printf_i+0x148>
 8004f52:	6923      	ldr	r3, [r4, #16]
 8004f54:	6861      	ldr	r1, [r4, #4]
 8004f56:	4299      	cmp	r1, r3
 8004f58:	bfde      	ittt	le
 8004f5a:	2330      	movle	r3, #48	; 0x30
 8004f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f64:	1b52      	subs	r2, r2, r5
 8004f66:	6122      	str	r2, [r4, #16]
 8004f68:	f8cd a000 	str.w	sl, [sp]
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	aa03      	add	r2, sp, #12
 8004f70:	4621      	mov	r1, r4
 8004f72:	4640      	mov	r0, r8
 8004f74:	f7ff fee4 	bl	8004d40 <_printf_common>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d14a      	bne.n	8005012 <_printf_i+0x1f6>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	b004      	add	sp, #16
 8004f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f043 0320 	orr.w	r3, r3, #32
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	4833      	ldr	r0, [pc, #204]	; (800505c <_printf_i+0x240>)
 8004f90:	2778      	movs	r7, #120	; 0x78
 8004f92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	6829      	ldr	r1, [r5, #0]
 8004f9a:	061f      	lsls	r7, r3, #24
 8004f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fa0:	d402      	bmi.n	8004fa8 <_printf_i+0x18c>
 8004fa2:	065f      	lsls	r7, r3, #25
 8004fa4:	bf48      	it	mi
 8004fa6:	b2b6      	uxthmi	r6, r6
 8004fa8:	07df      	lsls	r7, r3, #31
 8004faa:	bf48      	it	mi
 8004fac:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb0:	6029      	str	r1, [r5, #0]
 8004fb2:	bf48      	it	mi
 8004fb4:	6023      	strmi	r3, [r4, #0]
 8004fb6:	b91e      	cbnz	r6, 8004fc0 <_printf_i+0x1a4>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	e7a7      	b.n	8004f14 <_printf_i+0xf8>
 8004fc4:	4824      	ldr	r0, [pc, #144]	; (8005058 <_printf_i+0x23c>)
 8004fc6:	e7e4      	b.n	8004f92 <_printf_i+0x176>
 8004fc8:	4615      	mov	r5, r2
 8004fca:	e7bd      	b.n	8004f48 <_printf_i+0x12c>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	6826      	ldr	r6, [r4, #0]
 8004fd0:	6961      	ldr	r1, [r4, #20]
 8004fd2:	1d18      	adds	r0, r3, #4
 8004fd4:	6028      	str	r0, [r5, #0]
 8004fd6:	0635      	lsls	r5, r6, #24
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	d501      	bpl.n	8004fe0 <_printf_i+0x1c4>
 8004fdc:	6019      	str	r1, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <_printf_i+0x1ca>
 8004fe0:	0670      	lsls	r0, r6, #25
 8004fe2:	d5fb      	bpl.n	8004fdc <_printf_i+0x1c0>
 8004fe4:	8019      	strh	r1, [r3, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	4615      	mov	r5, r2
 8004fec:	e7bc      	b.n	8004f68 <_printf_i+0x14c>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	602a      	str	r2, [r5, #0]
 8004ff4:	681d      	ldr	r5, [r3, #0]
 8004ff6:	6862      	ldr	r2, [r4, #4]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f7fb f908 	bl	8000210 <memchr>
 8005000:	b108      	cbz	r0, 8005006 <_printf_i+0x1ea>
 8005002:	1b40      	subs	r0, r0, r5
 8005004:	6060      	str	r0, [r4, #4]
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	2300      	movs	r3, #0
 800500c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005010:	e7aa      	b.n	8004f68 <_printf_i+0x14c>
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	462a      	mov	r2, r5
 8005016:	4649      	mov	r1, r9
 8005018:	4640      	mov	r0, r8
 800501a:	47d0      	blx	sl
 800501c:	3001      	adds	r0, #1
 800501e:	d0ad      	beq.n	8004f7c <_printf_i+0x160>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	079b      	lsls	r3, r3, #30
 8005024:	d413      	bmi.n	800504e <_printf_i+0x232>
 8005026:	68e0      	ldr	r0, [r4, #12]
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	4298      	cmp	r0, r3
 800502c:	bfb8      	it	lt
 800502e:	4618      	movlt	r0, r3
 8005030:	e7a6      	b.n	8004f80 <_printf_i+0x164>
 8005032:	2301      	movs	r3, #1
 8005034:	4632      	mov	r2, r6
 8005036:	4649      	mov	r1, r9
 8005038:	4640      	mov	r0, r8
 800503a:	47d0      	blx	sl
 800503c:	3001      	adds	r0, #1
 800503e:	d09d      	beq.n	8004f7c <_printf_i+0x160>
 8005040:	3501      	adds	r5, #1
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	9903      	ldr	r1, [sp, #12]
 8005046:	1a5b      	subs	r3, r3, r1
 8005048:	42ab      	cmp	r3, r5
 800504a:	dcf2      	bgt.n	8005032 <_printf_i+0x216>
 800504c:	e7eb      	b.n	8005026 <_printf_i+0x20a>
 800504e:	2500      	movs	r5, #0
 8005050:	f104 0619 	add.w	r6, r4, #25
 8005054:	e7f5      	b.n	8005042 <_printf_i+0x226>
 8005056:	bf00      	nop
 8005058:	08005511 	.word	0x08005511
 800505c:	08005522 	.word	0x08005522

08005060 <__sflush_r>:
 8005060:	898a      	ldrh	r2, [r1, #12]
 8005062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005066:	4605      	mov	r5, r0
 8005068:	0710      	lsls	r0, r2, #28
 800506a:	460c      	mov	r4, r1
 800506c:	d458      	bmi.n	8005120 <__sflush_r+0xc0>
 800506e:	684b      	ldr	r3, [r1, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc05      	bgt.n	8005080 <__sflush_r+0x20>
 8005074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	dc02      	bgt.n	8005080 <__sflush_r+0x20>
 800507a:	2000      	movs	r0, #0
 800507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005082:	2e00      	cmp	r6, #0
 8005084:	d0f9      	beq.n	800507a <__sflush_r+0x1a>
 8005086:	2300      	movs	r3, #0
 8005088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800508c:	682f      	ldr	r7, [r5, #0]
 800508e:	6a21      	ldr	r1, [r4, #32]
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	d032      	beq.n	80050fa <__sflush_r+0x9a>
 8005094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	075a      	lsls	r2, r3, #29
 800509a:	d505      	bpl.n	80050a8 <__sflush_r+0x48>
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	1ac0      	subs	r0, r0, r3
 80050a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050a2:	b10b      	cbz	r3, 80050a8 <__sflush_r+0x48>
 80050a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a6:	1ac0      	subs	r0, r0, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	4602      	mov	r2, r0
 80050ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ae:	6a21      	ldr	r1, [r4, #32]
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b0      	blx	r6
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	d106      	bne.n	80050c8 <__sflush_r+0x68>
 80050ba:	6829      	ldr	r1, [r5, #0]
 80050bc:	291d      	cmp	r1, #29
 80050be:	d82b      	bhi.n	8005118 <__sflush_r+0xb8>
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <__sflush_r+0x108>)
 80050c2:	410a      	asrs	r2, r1
 80050c4:	07d6      	lsls	r6, r2, #31
 80050c6:	d427      	bmi.n	8005118 <__sflush_r+0xb8>
 80050c8:	2200      	movs	r2, #0
 80050ca:	6062      	str	r2, [r4, #4]
 80050cc:	04d9      	lsls	r1, r3, #19
 80050ce:	6922      	ldr	r2, [r4, #16]
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	d504      	bpl.n	80050de <__sflush_r+0x7e>
 80050d4:	1c42      	adds	r2, r0, #1
 80050d6:	d101      	bne.n	80050dc <__sflush_r+0x7c>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	b903      	cbnz	r3, 80050de <__sflush_r+0x7e>
 80050dc:	6560      	str	r0, [r4, #84]	; 0x54
 80050de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e0:	602f      	str	r7, [r5, #0]
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d0c9      	beq.n	800507a <__sflush_r+0x1a>
 80050e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d002      	beq.n	80050f4 <__sflush_r+0x94>
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff fbea 	bl	80048c8 <_free_r>
 80050f4:	2000      	movs	r0, #0
 80050f6:	6360      	str	r0, [r4, #52]	; 0x34
 80050f8:	e7c0      	b.n	800507c <__sflush_r+0x1c>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b0      	blx	r6
 8005100:	1c41      	adds	r1, r0, #1
 8005102:	d1c8      	bne.n	8005096 <__sflush_r+0x36>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0c5      	beq.n	8005096 <__sflush_r+0x36>
 800510a:	2b1d      	cmp	r3, #29
 800510c:	d001      	beq.n	8005112 <__sflush_r+0xb2>
 800510e:	2b16      	cmp	r3, #22
 8005110:	d101      	bne.n	8005116 <__sflush_r+0xb6>
 8005112:	602f      	str	r7, [r5, #0]
 8005114:	e7b1      	b.n	800507a <__sflush_r+0x1a>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	e7ad      	b.n	800507c <__sflush_r+0x1c>
 8005120:	690f      	ldr	r7, [r1, #16]
 8005122:	2f00      	cmp	r7, #0
 8005124:	d0a9      	beq.n	800507a <__sflush_r+0x1a>
 8005126:	0793      	lsls	r3, r2, #30
 8005128:	680e      	ldr	r6, [r1, #0]
 800512a:	bf08      	it	eq
 800512c:	694b      	ldreq	r3, [r1, #20]
 800512e:	600f      	str	r7, [r1, #0]
 8005130:	bf18      	it	ne
 8005132:	2300      	movne	r3, #0
 8005134:	eba6 0807 	sub.w	r8, r6, r7
 8005138:	608b      	str	r3, [r1, #8]
 800513a:	f1b8 0f00 	cmp.w	r8, #0
 800513e:	dd9c      	ble.n	800507a <__sflush_r+0x1a>
 8005140:	6a21      	ldr	r1, [r4, #32]
 8005142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005144:	4643      	mov	r3, r8
 8005146:	463a      	mov	r2, r7
 8005148:	4628      	mov	r0, r5
 800514a:	47b0      	blx	r6
 800514c:	2800      	cmp	r0, #0
 800514e:	dc06      	bgt.n	800515e <__sflush_r+0xfe>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	e78e      	b.n	800507c <__sflush_r+0x1c>
 800515e:	4407      	add	r7, r0
 8005160:	eba8 0800 	sub.w	r8, r8, r0
 8005164:	e7e9      	b.n	800513a <__sflush_r+0xda>
 8005166:	bf00      	nop
 8005168:	dfbffffe 	.word	0xdfbffffe

0800516c <_fflush_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	4605      	mov	r5, r0
 8005172:	460c      	mov	r4, r1
 8005174:	b913      	cbnz	r3, 800517c <_fflush_r+0x10>
 8005176:	2500      	movs	r5, #0
 8005178:	4628      	mov	r0, r5
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	b118      	cbz	r0, 8005186 <_fflush_r+0x1a>
 800517e:	6a03      	ldr	r3, [r0, #32]
 8005180:	b90b      	cbnz	r3, 8005186 <_fflush_r+0x1a>
 8005182:	f7ff f991 	bl	80044a8 <__sinit>
 8005186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f3      	beq.n	8005176 <_fflush_r+0xa>
 800518e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005190:	07d0      	lsls	r0, r2, #31
 8005192:	d404      	bmi.n	800519e <_fflush_r+0x32>
 8005194:	0599      	lsls	r1, r3, #22
 8005196:	d402      	bmi.n	800519e <_fflush_r+0x32>
 8005198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519a:	f7ff fb92 	bl	80048c2 <__retarget_lock_acquire_recursive>
 800519e:	4628      	mov	r0, r5
 80051a0:	4621      	mov	r1, r4
 80051a2:	f7ff ff5d 	bl	8005060 <__sflush_r>
 80051a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a8:	07da      	lsls	r2, r3, #31
 80051aa:	4605      	mov	r5, r0
 80051ac:	d4e4      	bmi.n	8005178 <_fflush_r+0xc>
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	059b      	lsls	r3, r3, #22
 80051b2:	d4e1      	bmi.n	8005178 <_fflush_r+0xc>
 80051b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b6:	f7ff fb85 	bl	80048c4 <__retarget_lock_release_recursive>
 80051ba:	e7dd      	b.n	8005178 <_fflush_r+0xc>

080051bc <__swhatbuf_r>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	460c      	mov	r4, r1
 80051c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c4:	2900      	cmp	r1, #0
 80051c6:	b096      	sub	sp, #88	; 0x58
 80051c8:	4615      	mov	r5, r2
 80051ca:	461e      	mov	r6, r3
 80051cc:	da0d      	bge.n	80051ea <__swhatbuf_r+0x2e>
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	bf0c      	ite	eq
 80051da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80051de:	2340      	movne	r3, #64	; 0x40
 80051e0:	2000      	movs	r0, #0
 80051e2:	6031      	str	r1, [r6, #0]
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	b016      	add	sp, #88	; 0x58
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
 80051ea:	466a      	mov	r2, sp
 80051ec:	f000 f87c 	bl	80052e8 <_fstat_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	dbec      	blt.n	80051ce <__swhatbuf_r+0x12>
 80051f4:	9901      	ldr	r1, [sp, #4]
 80051f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80051fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80051fe:	4259      	negs	r1, r3
 8005200:	4159      	adcs	r1, r3
 8005202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005206:	e7eb      	b.n	80051e0 <__swhatbuf_r+0x24>

08005208 <__smakebuf_r>:
 8005208:	898b      	ldrh	r3, [r1, #12]
 800520a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800520c:	079d      	lsls	r5, r3, #30
 800520e:	4606      	mov	r6, r0
 8005210:	460c      	mov	r4, r1
 8005212:	d507      	bpl.n	8005224 <__smakebuf_r+0x1c>
 8005214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	2301      	movs	r3, #1
 800521e:	6163      	str	r3, [r4, #20]
 8005220:	b002      	add	sp, #8
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	ab01      	add	r3, sp, #4
 8005226:	466a      	mov	r2, sp
 8005228:	f7ff ffc8 	bl	80051bc <__swhatbuf_r>
 800522c:	9900      	ldr	r1, [sp, #0]
 800522e:	4605      	mov	r5, r0
 8005230:	4630      	mov	r0, r6
 8005232:	f7ff fbb5 	bl	80049a0 <_malloc_r>
 8005236:	b948      	cbnz	r0, 800524c <__smakebuf_r+0x44>
 8005238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523c:	059a      	lsls	r2, r3, #22
 800523e:	d4ef      	bmi.n	8005220 <__smakebuf_r+0x18>
 8005240:	f023 0303 	bic.w	r3, r3, #3
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	e7e3      	b.n	8005214 <__smakebuf_r+0xc>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	6020      	str	r0, [r4, #0]
 8005250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	9b00      	ldr	r3, [sp, #0]
 8005258:	6163      	str	r3, [r4, #20]
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	6120      	str	r0, [r4, #16]
 800525e:	b15b      	cbz	r3, 8005278 <__smakebuf_r+0x70>
 8005260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005264:	4630      	mov	r0, r6
 8005266:	f000 f851 	bl	800530c <_isatty_r>
 800526a:	b128      	cbz	r0, 8005278 <__smakebuf_r+0x70>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	431d      	orrs	r5, r3
 800527c:	81a5      	strh	r5, [r4, #12]
 800527e:	e7cf      	b.n	8005220 <__smakebuf_r+0x18>

08005280 <_putc_r>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	460d      	mov	r5, r1
 8005284:	4614      	mov	r4, r2
 8005286:	4606      	mov	r6, r0
 8005288:	b118      	cbz	r0, 8005292 <_putc_r+0x12>
 800528a:	6a03      	ldr	r3, [r0, #32]
 800528c:	b90b      	cbnz	r3, 8005292 <_putc_r+0x12>
 800528e:	f7ff f90b 	bl	80044a8 <__sinit>
 8005292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005294:	07d8      	lsls	r0, r3, #31
 8005296:	d405      	bmi.n	80052a4 <_putc_r+0x24>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	0599      	lsls	r1, r3, #22
 800529c:	d402      	bmi.n	80052a4 <_putc_r+0x24>
 800529e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a0:	f7ff fb0f 	bl	80048c2 <__retarget_lock_acquire_recursive>
 80052a4:	68a3      	ldr	r3, [r4, #8]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	60a3      	str	r3, [r4, #8]
 80052ac:	da05      	bge.n	80052ba <_putc_r+0x3a>
 80052ae:	69a2      	ldr	r2, [r4, #24]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	db12      	blt.n	80052da <_putc_r+0x5a>
 80052b4:	b2eb      	uxtb	r3, r5
 80052b6:	2b0a      	cmp	r3, #10
 80052b8:	d00f      	beq.n	80052da <_putc_r+0x5a>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	6022      	str	r2, [r4, #0]
 80052c0:	701d      	strb	r5, [r3, #0]
 80052c2:	b2ed      	uxtb	r5, r5
 80052c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c6:	07da      	lsls	r2, r3, #31
 80052c8:	d405      	bmi.n	80052d6 <_putc_r+0x56>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	d402      	bmi.n	80052d6 <_putc_r+0x56>
 80052d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d2:	f7ff faf7 	bl	80048c4 <__retarget_lock_release_recursive>
 80052d6:	4628      	mov	r0, r5
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	4629      	mov	r1, r5
 80052dc:	4622      	mov	r2, r4
 80052de:	4630      	mov	r0, r6
 80052e0:	f7ff f9d1 	bl	8004686 <__swbuf_r>
 80052e4:	4605      	mov	r5, r0
 80052e6:	e7ed      	b.n	80052c4 <_putc_r+0x44>

080052e8 <_fstat_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d07      	ldr	r5, [pc, #28]	; (8005308 <_fstat_r+0x20>)
 80052ec:	2300      	movs	r3, #0
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	f7fc f812 	bl	800131e <_fstat>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	d102      	bne.n	8005304 <_fstat_r+0x1c>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	b103      	cbz	r3, 8005304 <_fstat_r+0x1c>
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	bd38      	pop	{r3, r4, r5, pc}
 8005306:	bf00      	nop
 8005308:	20000318 	.word	0x20000318

0800530c <_isatty_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d06      	ldr	r5, [pc, #24]	; (8005328 <_isatty_r+0x1c>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	f7fc f811 	bl	800133e <_isatty>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_isatty_r+0x1a>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_isatty_r+0x1a>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	20000318 	.word	0x20000318

0800532c <_sbrk_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d06      	ldr	r5, [pc, #24]	; (8005348 <_sbrk_r+0x1c>)
 8005330:	2300      	movs	r3, #0
 8005332:	4604      	mov	r4, r0
 8005334:	4608      	mov	r0, r1
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	f7fc f81a 	bl	8001370 <_sbrk>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d102      	bne.n	8005346 <_sbrk_r+0x1a>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b103      	cbz	r3, 8005346 <_sbrk_r+0x1a>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	20000318 	.word	0x20000318

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
